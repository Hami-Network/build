{"version":3,"sources":["components/Layout/Flex.tsx","utils/latinise.ts","components/SearchInput/SearchInput.tsx","components/Select/Select.tsx","components/Loading.tsx","components/ExpandableSectionButton/ExpandableSectionButton.tsx","components/RoiCalculatorModal/useRoiCalculatorReducer.ts","utils/getLiquidityUrlPathParts.ts","views/Farms/components/FarmCard/DetailsSection.tsx","components/Tags.tsx","components/TokenImage/index.tsx","views/Farms/components/FarmCard/CardHeading.tsx","components/Balance.tsx","components/Modal/Spacer.tsx","components/Modal/ModalActions.tsx","components/Modal/ModalInput.tsx","components/RoiCalculatorModal/RoiCalculatorFooter.tsx","views/Farms/components/types.ts","components/RoiCalculatorModal/RoiCard.tsx","components/RoiCalculatorModal/AnimatedArrow.tsx","components/RoiCalculatorModal/index.tsx","views/Farms/components/DepositModal.tsx","views/Farms/components/WithdrawModal.tsx","views/Farms/hooks/useUnstakeFarms.ts","views/Farms/hooks/useStakeFarms.ts","views/Farms/components/FarmCard/StakeAction.tsx","views/Farms/hooks/useHarvestFarm.ts","views/Farms/components/FarmCard/HarvestAction.tsx","views/Farms/hooks/useApproveFarm.ts","views/Farms/components/FarmCard/CardActionsContainer.tsx","views/Farms/components/FarmCard/ApyButton.tsx","views/Farms/components/FarmCard/FarmCard.tsx","hooks/useDelayedUnmount.ts","views/Farms/components/FarmTable/Apr.tsx","views/Farms/components/FarmTable/Farm.tsx","views/Farms/components/FarmTable/Earned.tsx","views/Farms/components/FarmTable/Details.tsx","views/Farms/components/FarmTable/Multiplier.tsx","views/Farms/components/FarmTable/Liquidity.tsx","views/Farms/components/FarmTable/Actions/styles.ts","views/Farms/components/FarmTable/Actions/HarvestAction.tsx","views/Farms/components/FarmTable/Actions/StakedAction.tsx","views/Farms/components/FarmTable/Actions/ActionPanel.tsx","views/Farms/components/FarmTable/CellLayout.tsx","views/Farms/components/FarmTable/Row.tsx","views/Farms/components/FarmTable/FarmTable.tsx","views/Farms/components/FarmTabButtons/index.tsx","views/Farms/components/ToggleView/ToggleView.tsx","views/Farms/Farms.tsx","utils/encode.ts","utils/getGasPrice.ts","utils/calls/farms.ts","components/PageHeader/PageHeader.tsx"],"names":["FlexLayout","styled","div","Latinise","latin_map","τ","Τ","latinise","input","replace","x","StyledInput","Input","InputWrapper","theme","mediaQueries","sm","Container","SearchInput","onChangeCallback","onChange","placeholder","useState","toggled","setToggled","searchText","setSearchText","t","useTranslation","debouncedOnChange","useMemo","debounce","e","value","target","onBlur","DropDownHeader","shadows","inset","colors","inputSecondary","DropDownListContainer","zIndices","dropdown","DropDownContainer","width","props","isOpen","css","tooltip","boxShadow","DropDownList","ul","ListItem","li","Select","options","containerRef","useRef","dropdownRef","setIsOpen","selectedOptionIndex","setSelectedOptionIndex","height","containerSize","setContainerSize","toggling","event","stopPropagation","useEffect","current","offsetWidth","offsetHeight","handleClickOutside","document","addEventListener","removeEventListener","ref","onClick","label","color","map","option","index","selectedIndex","Loading","Wrapper","text","ExpandableSectionButton","expanded","role","bold","defaultProps","EditingCurrency","CalculatorMode","getLiquidityUrlPathParts","quoteTokenAddress","tokenAddress","wBNBAddressString","getWbnbAddress","quoteTokenAddressString","process","tokenAddressString","secondPart","StyledLinkExternal","LinkExternal","DetailsSection","bscScanAddress","removed","infoAddress","totalValueFormatted","lpLabel","addLiquidityUrl","isTokenOnly","justifyContent","href","symbol","NofeeTag","variant","outline","startIcon","mr","getImageUrlFromToken","token","address","getAddress","tokens","wbnb","TokenPairImage","primaryToken","secondaryToken","primarySrc","secondarySrc","TokenImage","src","Flex","MultiplierTag","Tag","CardHeading","multiplier","quoteToken","depositfee","alignItems","mb","flexDirection","split","Balance","decimals","isDisabled","unit","prefix","previousValue","start","end","suffix","duration","separator","StyledSpacer","size","Spacer","s","spacing","useContext","ThemeContext","StyledModalActions","primaryDark","StyledModalAction","ModalActions","children","l","React","Children","toArray","length","child","i","StyledTokenInput","isWarning","warning","xs","StyledErrorMessage","Text","ModalInput","max","onSelectMax","inputTitle","isBalanceZero","style","position","pl","fontSize","balance","balanceBigNumber","BigNumber","gt","lt","toLocaleString","toFixed","ROUND_DOWN","displayBalance","pattern","inputMode","step","min","scale","external","Footer","BulletList","textSubtle","RoiCalculatorFooter","isFarm","apr","displayApr","autoCompoundFrequency","linkLabel","linkHref","performanceFee","isExpanded","setIsExpanded","useTooltip","my","placement","tooltipOffset","multiplierRef","targetRef","multiplierTooltip","multiplierTooltipVisible","tooltipVisible","gridRowCount","apy","getApy","p","prev","px","gridTemplateColumns","gridRowGap","gridTemplateRows","small","textAlign","compoundTimes","display","mt","fee","compoundingIndexToFrequency","ViewMode","initialState","controls","compounding","compoundingFrequency","activeCompoundingIndex","stakingDuration","mode","ROI_BASED_ON_PRINCIPAL","editingCurrency","USD","data","principalAsToken","principalAsUSD","roiUSD","roiTokens","roiPercentage","roiCalculatorReducer","state","action","type","payload","toggledCompounding","PRINCIPAL_BASED_ON_ROI","parseFloat","currencyAfterChange","TOKEN","useRoiCalculatorReducer","stakingTokenPrice","earningTokenPrice","useReducer","dispatch","principalInUSDAsNumber","compoundFrequency","interestBreakdown","getInterestBreakdown","principalInUSD","hasInterest","Number","isNaN","roiAsUSD","getRoi","amountEarned","amountInvested","principalForExpectedRoi","getPrincipalForInterest","principalUSD","principalToken","setPrincipalFromUSDValue","amount","principalAsTokenBN","setPrincipalFromTokenValue","useCallback","principalAsUsdBN","times","principalAsUsdString","setStakingDuration","stakingDurationIndex","toggleCompounding","toggleEditingCurrency","setCompoundingFrequency","setCalculatorMode","modeToSet","setTargetRoi","targetRoiAsTokens","toNumber","MILLION","RoiCardWrapper","Box","radii","default","RoiCardInner","gradients","bubblegum","RoiInputContainer","RoiDisplayContainer","RoiDollarAmount","fadeOut","background","RoiCard","earningTokenSymbol","calculatorState","inputRef","focus","onEnterEditing","textTransform","currentTarget","minimumFractionDigits","maximumFractionDigits","rotate","keyframes","ArrowContainer","primary","AnimatedArrow","key","setKey","prevKey","prevId","parseInt","StyledModal","Modal","ScrollableContainer","FullWidthButtonMenu","ButtonMenu","disabled","RoiCalculatorModal","onDismiss","onBack","stakingTokenBalance","stakingTokenSymbol","initialValue","account","useActiveWeb3React","balanceInputRef","console","log","assetSymbol","editingUnit","editingValue","conversionUnit","conversionValue","onUserInput","title","headerBackground","asset","currencyValue","innerRef","switchEditingUnits","onFocus","lte","getBalanceNumber","toString","toLocaleUpperCase","activeIndex","onItemClick","AnnualRoiContainer","AnnualRoiDisplay","DepositModal","stakedBalance","onConfirm","tokenName","lpPrice","cakePrice","val","setVal","useToast","toastSuccess","toastError","pendingTx","setPendingTx","showRoiCalculator","setShowRoiCalculator","fullBalance","getFullDisplayBalance","lpTokensToStake","fullBalanceNumber","usdToStake","annualRoi","formattedAnnualRoi","formatNumber","handleChange","validity","valid","handleSelectMax","plus","isFinite","eq","a","error","alignSelf","WithdrawModal","valNumber","useUnstakeFarms","pid","masterChefContract","useMasterchef","onUnstake","unstakeFarm","useStakeFarms","onStake","stakeFarm","txHash","info","IconButtonWrapper","StakeAction","tokenBalance","location","useLocation","useAppDispatch","useWeb3React","useLpTokenPrice","handleStake","fetchFarmUserDataAsync","pids","handleUnstake","stakedBalanceBigNumber","getBalanceAmount","useModal","onPresentDeposit","onPresentWithdraw","some","item","pathname","includes","useHarvestFarm","farmPid","onReward","harvestFarm","HarvestAction","earnings","isabletoharvest","usePriceCakeBusd","rawEarningsBalance","BIG_ZERO","earningsBusd","multipliedBy","useApproveFarm","lpContract","callWithGasPrice","useCallWithGasPrice","onApprove","ethers","constants","MaxUint256","tx","wait","receipt","status","Action","CardActions","farm","requestedApproval","setRequestedApproval","lpAddresses","userData","allowance","allowanceAsString","tokenBalanceAsString","stakedBalanceAsString","earningsAsString","lpAddress","isApproved","isGreaterThan","useERC20","handleApprove","pr","lpSymbol","ConnectWalletButton","ApyLabelContainer","ApyButton","useFarmUser","onPresentApyModal","ml","StyledCard","Card","FarmCardInnerContainer","ExpandingWrapper","cardBorder","FarmCard","showExpandableSection","setShowExpandableSection","liquidity","undefined","toUpperCase","earnLabel","dual","liquidityUrlPathParts","BASE_URL","BASE_ADD_LIQUIDITY_URL","isPromotedFarm","isActive","isCommunityFarm","isCommunity","CardActionsContainer","getBscScanLink","useDelayedUnmount","isMounted","delayTime","shouldRender","setShouldRender","timeoutId","setTimeout","clearTimeout","AprWrapper","Apr","originalValue","hideButton","TokenWrapper","Farm","rawStakedBalance","Amount","span","earned","textDisabled","Earned","userDataReady","ArrowIcon","ChevronDownIcon","Details","actionPanelToggled","isDesktop","useMatchBreakpoints","ReferenceElement","MultiplierWrapper","lg","Multiplier","displayMultiplier","toLowerCase","tooltipContent","LiquidityWrapper","Liquidity","displayLiquidity","ActionContainer","xl","ActionTitles","ActionContent","canharvest","earningsBigNumber","isZero","Staked","marginBottom","marginTop","expandAnimation","collapseAnimation","StakeContainer","TagsContainer","InfoContainer","ValueContainer","ValueWrapper","ActionPanel","details","bsc","StakedAction","Label","ContentContainer","CellLayout","MobileColumnSchema","id","name","sortable","DesktopColumnSchema","cells","CellInner","StyledTr","tr","EarnedMobileCell","td","AprMobileCell","FarmMobileCell","Row","hasStakedAmount","actionPanelExpanded","setActionPanelExpanded","shouldRenderChild","toggleActionPanel","isMobile","isSmallerScreen","tableSchema","columnNames","column","Object","keys","columnIndex","indexOf","createElement","colSpan","card","dropShadow","TableWrapper","StyledTable","table","TableBody","tbody","TableContainer","ScrollButtonContainer","FarmTable","tableWrapperEl","columns","rows","useTable","sortColumn","row","original","scrollIntoView","behavior","FarmTabButtons","hasStakeInFinishedFarms","url","useRouteMatch","as","Link","to","show","ToggleView","viewMode","onToggle","handleToggle","CARD","TABLE","ControlContainer","ToggleWrapper","LabelWrapper","FilterContainer","ViewControls","StyledPageHeader","PageHeader","getDisplayApr","cakeRewardsApr","lpRewardsApr","Farms","farmsProps","path","useFarms","farmsLP","userDataLoaded","query","setQuery","usePersistState","localStorageKey","setViewMode","sortOption","setSortOption","chosenFarmsLength","tokenMode","isArchived","isInactive","usePollFarmsData","useUserFarmStakedOnly","stakedOnly","setStakedOnly","activeFarms","filter","isArchivedPid","inactiveFarms","archivedFarms","stakedOnlyFarms","stakedInactiveFarms","stakedArchivedFarms","farmsList","farmsToDisplay","farmsToDisplayWithAPR","lpTotalInQuoteToken","busdPrice","totalLiquidity","getFarmApr","poolWeight","ChainId","MAINNET","lokipersecond","lowercaseQuery","loadMoreRef","numberOfFarmsVisible","setNumberOfFarmsVisible","observerIsSet","setObserverIsSet","chosenFarmsMemoized","chosenFarms","farms","orderBy","slice","sortFarms","IntersectionObserver","entries","isIntersecting","farmsCurrentlyVisible","rootMargin","threshold","observe","rowData","flex","Page","checked","marginLeft","sort","b","exact","renderContent","rot13","c","getGasPrice","userGas","store","getState","user","gasPrice","GAS_PRICE_GWEI","testnet","gasLimit","DEFAULT_GAS_LIMIT","cookies","Cookies","BIG_TEN","pow","DEFAULT_TOKEN_DECIMAL","get","isAddress","deposit","withdraw","Outer","Inner"],"mappings":"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","file":"static/js/10.07edc7f6.chunk.js","sourcesContent":["import styled from 'styled-components'\r\n\r\nconst FlexLayout = styled.div`\r\n  display: flex;\r\n  justify-content: center;\r\n  flex-wrap: wrap;\r\n  & > * {\r\n    min-width: 280px;\r\n    max-width: 31.5%;\r\n    width: 100%;\r\n    margin: 0 8px;\r\n    margin-bottom: 32px;\r\n  }\r\n`\r\n\r\nexport default FlexLayout\r\n","export const Latinise = {\r\n  latin_map: {\r\n    τ: 't',\r\n    Τ: 'T',\r\n  },\r\n}\r\n\r\nexport const latinise = (input: string) => {\r\n  return input.replace(/[^A-Za-z0-9[\\] ]/g, (x) => Latinise.latin_map[x] || x)\r\n}\r\n","import React, { useState, useMemo } from 'react'\r\nimport { Input } from '@pancakeswap/uikit'\r\nimport styled from 'styled-components'\r\nimport debounce from 'lodash/debounce'\r\nimport { useTranslation } from 'contexts/Localization'\r\n\r\nconst StyledInput = styled(Input)`\r\n  border-radius: 16px;\r\n  margin-left: auto;\r\n`\r\n\r\nconst InputWrapper = styled.div`\r\n  position: relative;\r\n  ${({ theme }) => theme.mediaQueries.sm} {\r\n    display: block;\r\n  }\r\n`\r\n\r\nconst Container = styled.div<{ toggled: boolean }>``\r\n\r\ninterface Props {\r\n  onChange: (e: React.ChangeEvent<HTMLInputElement>) => void\r\n  placeholder?: string\r\n}\r\n\r\nconst SearchInput: React.FC<Props> = ({ onChange: onChangeCallback, placeholder = 'Search' }) => {\r\n  const [toggled, setToggled] = useState(false)\r\n  const [searchText, setSearchText] = useState('')\r\n\r\n  const { t } = useTranslation()\r\n\r\n  const debouncedOnChange = useMemo(\r\n    () => debounce((e: React.ChangeEvent<HTMLInputElement>) => onChangeCallback(e), 500),\r\n    [onChangeCallback],\r\n  )\r\n\r\n  const onChange = (e: React.ChangeEvent<HTMLInputElement>) => {\r\n    setSearchText(e.target.value)\r\n    debouncedOnChange(e)\r\n  }\r\n\r\n  return (\r\n    <Container toggled={toggled}>\r\n      <InputWrapper>\r\n        <StyledInput\r\n          value={searchText}\r\n          onChange={onChange}\r\n          placeholder={t(placeholder)}\r\n          onBlur={() => setToggled(false)}\r\n        />\r\n      </InputWrapper>\r\n    </Container>\r\n  )\r\n}\r\n\r\nexport default SearchInput\r\n","import React, { useState, useRef, useEffect } from 'react'\r\nimport styled, { css } from 'styled-components'\r\nimport { ArrowDropDownIcon, Text } from '@pancakeswap/uikit'\r\n\r\nconst DropDownHeader = styled.div`\r\n  width: 100%;\r\n  height: 40px;\r\n  display: flex;\r\n  align-items: center;\r\n  justify-content: space-between;\r\n  padding: 0px 16px;\r\n  box-shadow: ${({ theme }) => theme.shadows.inset};\r\n  border: 1px solid ${({ theme }) => theme.colors.inputSecondary};\r\n  border-radius: 16px;\r\n  background: ${({ theme }) => theme.colors.input};\r\n  transition: border-radius 0.15s;\r\n`\r\n\r\nconst DropDownListContainer = styled.div`\r\n  min-width: 136px;\r\n  height: 0;\r\n  position: absolute;\r\n  overflow: hidden;\r\n  background: ${({ theme }) => theme.colors.input};\r\n  z-index: ${({ theme }) => theme.zIndices.dropdown};\r\n  transition: transform 0.15s, opacity 0.15s;\r\n  transform: scaleY(0);\r\n  transform-origin: top;\r\n  opacity: 0;\r\n  width: 100%;\r\n\r\n  ${({ theme }) => theme.mediaQueries.sm} {\r\n    min-width: 168px;\r\n  }\r\n`\r\n\r\nconst DropDownContainer = styled.div<{ isOpen: boolean; width: number; height: number }>`\r\n  cursor: pointer;\r\n  width: ${({ width }) => width}px;\r\n  position: relative;\r\n  background: ${({ theme }) => theme.colors.input};\r\n  border-radius: 16px;\r\n  height: 40px;\r\n  min-width: 136px;\r\n  user-select: none;\r\n\r\n  ${({ theme }) => theme.mediaQueries.sm} {\r\n    min-width: 168px;\r\n  }\r\n\r\n  ${(props) =>\r\n    props.isOpen &&\r\n    css`\r\n      ${DropDownHeader} {\r\n        border-bottom: 1px solid ${({ theme }) => theme.colors.inputSecondary};\r\n        box-shadow: ${({ theme }) => theme.tooltip.boxShadow};\r\n        border-radius: 16px 16px 0 0;\r\n      }\r\n\r\n      ${DropDownListContainer} {\r\n        height: auto;\r\n        transform: scaleY(1);\r\n        opacity: 1;\r\n        border: 1px solid ${({ theme }) => theme.colors.inputSecondary};\r\n        border-top-width: 0;\r\n        border-radius: 0 0 16px 16px;\r\n        box-shadow: ${({ theme }) => theme.tooltip.boxShadow};\r\n      }\r\n    `}\r\n\r\n  svg {\r\n    position: absolute;\r\n    right: 16px;\r\n    top: 50%;\r\n    transform: translateY(-50%);\r\n  }\r\n`\r\n\r\nconst DropDownList = styled.ul`\r\n  padding: 0;\r\n  margin: 0;\r\n  box-sizing: border-box;\r\n  z-index: ${({ theme }) => theme.zIndices.dropdown};\r\n`\r\n\r\nconst ListItem = styled.li`\r\n  list-style: none;\r\n  padding: 8px 16px;\r\n  &:hover {\r\n    background: ${({ theme }) => theme.colors.inputSecondary};\r\n  }\r\n`\r\n\r\nexport interface SelectProps {\r\n  options: OptionProps[]\r\n  onChange?: (option: OptionProps) => void\r\n}\r\n\r\nexport interface OptionProps {\r\n  label: string\r\n  value: any\r\n}\r\n\r\nconst Select: React.FunctionComponent<SelectProps> = ({ options, onChange }) => {\r\n  const containerRef = useRef(null)\r\n  const dropdownRef = useRef(null)\r\n  const [isOpen, setIsOpen] = useState(false)\r\n  const [selectedOptionIndex, setSelectedOptionIndex] = useState(0)\r\n  const [containerSize, setContainerSize] = useState({ width: 0, height: 0 })\r\n\r\n  const toggling = (event: React.MouseEvent<HTMLDivElement>) => {\r\n    setIsOpen(!isOpen)\r\n    event.stopPropagation()\r\n  }\r\n\r\n  const onOptionClicked = (selectedIndex: number) => () => {\r\n    setSelectedOptionIndex(selectedIndex)\r\n    setIsOpen(false)\r\n\r\n    if (onChange) {\r\n      onChange(options[selectedIndex])\r\n    }\r\n  }\r\n\r\n  useEffect(() => {\r\n    setContainerSize({\r\n      width: dropdownRef.current.offsetWidth, // Consider border\r\n      height: dropdownRef.current.offsetHeight,\r\n    })\r\n\r\n    const handleClickOutside = () => {\r\n      setIsOpen(false)\r\n    }\r\n\r\n    document.addEventListener('click', handleClickOutside)\r\n    return () => {\r\n      document.removeEventListener('click', handleClickOutside)\r\n    }\r\n  }, [])\r\n\r\n  return (\r\n    <DropDownContainer isOpen={isOpen} ref={containerRef} {...containerSize}>\r\n      {containerSize.width !== 0 && (\r\n        <DropDownHeader onClick={toggling}>\r\n          <Text>{options[selectedOptionIndex].label}</Text>\r\n        </DropDownHeader>\r\n      )}\r\n      <ArrowDropDownIcon color=\"text\" onClick={toggling} />\r\n      <DropDownListContainer>\r\n        <DropDownList ref={dropdownRef}>\r\n          {options.map((option, index) =>\r\n            index !== selectedOptionIndex ? (\r\n              <ListItem onClick={onOptionClicked(index)} key={option.label}>\r\n                <Text>{option.label}</Text>\r\n              </ListItem>\r\n            ) : null,\r\n          )}\r\n        </DropDownList>\r\n      </DropDownListContainer>\r\n    </DropDownContainer>\r\n  )\r\n}\r\n\r\nexport default Select\r\n","import styled from 'styled-components'\r\n\r\nconst Loading = styled.div`\r\n  border: 8px solid #f3f3f3;\r\n  border-radius: 50%;\r\n  border-top: 8px solid #ddd;\r\n  border-bottom: 8px solid #ddd;\r\n  width: 20px;\r\n  height: 20px;\r\n  -webkit-animation: spin 2s linear infinite;\r\n  animation: spin 2s linear infinite;\r\n  @-webkit-keyframes spin {\r\n    0% {\r\n      -webkit-transform: rotate(0deg);\r\n    }\r\n    100% {\r\n      -webkit-transform: rotate(360deg);\r\n    }\r\n  }\r\n\r\n  @keyframes spin {\r\n    0% {\r\n      transform: rotate(0deg);\r\n    }\r\n    100% {\r\n      transform: rotate(360deg);\r\n    }\r\n  }\r\n`\r\n\r\nexport default Loading\r\n","import React from 'react'\r\nimport styled from 'styled-components'\r\nimport { ChevronDownIcon, ChevronUpIcon, Text } from '@pancakeswap/uikit'\r\nimport { useTranslation } from 'contexts/Localization'\r\n\r\nexport interface ExpandableSectionButtonProps {\r\n  onClick?: () => void\r\n  expanded?: boolean\r\n}\r\n\r\nconst Wrapper = styled.div`\r\n  display: flex;\r\n  align-items: center;\r\n  justify-content: center;\r\n  cursor: pointer;\r\n\r\n  svg {\r\n    fill: ${({ theme }) => theme.colors.text};\r\n  }\r\n`\r\n\r\nconst ExpandableSectionButton: React.FC<ExpandableSectionButtonProps> = ({ onClick, expanded }) => {\r\n  const { t } = useTranslation()\r\n\r\n  return (\r\n    <Wrapper aria-label={t('Hide or show expandable content')} role=\"button\" onClick={() => onClick()}>\r\n      <Text color=\"text\" bold>\r\n        {expanded ? t('Hide') : t('Details')}\r\n      </Text>\r\n      {expanded ? <ChevronUpIcon /> : <ChevronDownIcon />}\r\n    </Wrapper>\r\n  )\r\n}\r\n\r\nExpandableSectionButton.defaultProps = {\r\n  expanded: false,\r\n}\r\n\r\nexport default ExpandableSectionButton\r\n","import { useEffect, useReducer, useCallback } from 'react'\r\nimport BigNumber from 'bignumber.js'\r\nimport { getInterestBreakdown, getPrincipalForInterest, getRoi } from 'utils/compoundApyHelpers'\r\n\r\n/**\r\n * This hook is handling all the calculator state and calculations.\r\n * UI connected to it is merely representation of the data and buttons to trigger actions\r\n */\r\n\r\n// Mapping from the compounding frequency button index to actual componding frequency\r\n// in number of compounds per day\r\nconst compoundingIndexToFrequency = {\r\n  0: 1,\r\n  1: 0.142857142,\r\n  2: 0.071428571, // once every 7 days\r\n  3: 0.033333333, // once every 30 days\r\n}\r\n\r\nconst TOKEN_PRECISION = 10\r\nconst USD_PRECISION = 2\r\n\r\n// Used to track/react which currency user is editing (i.e. USD amount or Token amount)\r\nexport enum EditingCurrency {\r\n  TOKEN,\r\n  USD,\r\n}\r\n\r\n// Calculator works in 2 modes\r\nexport enum CalculatorMode {\r\n  ROI_BASED_ON_PRINCIPAL, // User edits principal value and sees what ROI they get\r\n  PRINCIPAL_BASED_ON_ROI, // User edits ROI value and sees what principal they need to invest to reach it\r\n}\r\n\r\nexport interface RoiCalculatorReducerState {\r\n  controls: {\r\n    compounding: boolean // Compounding checkbox state\r\n    compoundingFrequency: number // Compounding frequency in number of compounds per day\r\n    activeCompoundingIndex: number // index of active compounding button in ButtonMenu\r\n    stakingDuration: number // index of active staking duration button in ButtonMenu\r\n    mode: CalculatorMode\r\n    editingCurrency: EditingCurrency\r\n  }\r\n  data: {\r\n    principalAsToken: string // Used as value for Inputs\r\n    principalAsUSD: string // Used as value for Inputs\r\n    roiUSD: number\r\n    roiTokens: number\r\n    roiPercentage: number // ROI expressed in percentage relative to principal\r\n  }\r\n}\r\n\r\nconst initialState: RoiCalculatorReducerState = {\r\n  controls: {\r\n    compounding: false,\r\n    compoundingFrequency: 1, // how many compoound in a day , e.g. 1 = once a day, 0.071 - once per 2 weeks\r\n    activeCompoundingIndex: 0, // active compounding selected in\r\n    stakingDuration: 3,\r\n    mode: CalculatorMode.ROI_BASED_ON_PRINCIPAL,\r\n    editingCurrency: EditingCurrency.USD,\r\n  },\r\n  data: {\r\n    principalAsToken: '0.00',\r\n    principalAsUSD: '',\r\n    roiUSD: 0,\r\n    roiTokens: 0,\r\n    roiPercentage: 0,\r\n  },\r\n}\r\n\r\nconst roiCalculatorReducer = (\r\n  state: RoiCalculatorReducerState,\r\n  action: { type: string; payload?: any },\r\n): RoiCalculatorReducerState => {\r\n  switch (action.type) {\r\n    case 'setStakingDuration': {\r\n      const controls = { ...state.controls, stakingDuration: action.payload }\r\n      return {\r\n        ...state,\r\n        controls,\r\n      }\r\n    }\r\n    case 'toggleCompounding': {\r\n      const toggledCompounding = !state.controls.compounding\r\n      const controls = { ...state.controls, compounding: toggledCompounding }\r\n      return {\r\n        ...state,\r\n        controls,\r\n      }\r\n    }\r\n    case 'setCompoundingFrequency': {\r\n      const { index, autoCompoundFrequency } = action.payload\r\n      if (autoCompoundFrequency) {\r\n        return {\r\n          ...state,\r\n          controls: {\r\n            ...state.controls,\r\n            compoundingFrequency: autoCompoundFrequency,\r\n          },\r\n        }\r\n      }\r\n      const compoundingFrequency = compoundingIndexToFrequency[index]\r\n      const controls = { ...state.controls, compoundingFrequency, activeCompoundingIndex: index }\r\n      return {\r\n        ...state,\r\n        controls,\r\n      }\r\n    }\r\n    case 'setPrincipal': {\r\n      const { principalAsUSD, principalAsToken } = action.payload\r\n      const data = { ...state.data, principalAsUSD, principalAsToken }\r\n      const controls = { ...state.controls, mode: CalculatorMode.ROI_BASED_ON_PRINCIPAL }\r\n      return {\r\n        controls,\r\n        data,\r\n      }\r\n    }\r\n    case 'setPrincipalForTargetRoi': {\r\n      const { principalAsUSD, principalAsToken, roiPercentage } = action.payload\r\n      const data = { ...state.data, principalAsUSD, principalAsToken, roiPercentage }\r\n      return {\r\n        ...state,\r\n        data,\r\n      }\r\n    }\r\n    case 'setCalculatorMode': {\r\n      const mode = action.payload\r\n      const controls = { ...state.controls, mode }\r\n      if (mode === CalculatorMode.PRINCIPAL_BASED_ON_ROI) {\r\n        const roiUSD = parseFloat(state.data.roiUSD.toFixed(USD_PRECISION))\r\n        const data = { ...state.data, roiUSD }\r\n        return { controls, data }\r\n      }\r\n      return { ...state, controls }\r\n    }\r\n    case 'setRoi': {\r\n      const data = { ...state.data, ...action.payload }\r\n      return { ...state, data }\r\n    }\r\n    case 'setTargetRoi': {\r\n      const { roiUSD, roiTokens } = action.payload\r\n      const data = { ...state.data, roiUSD, roiTokens }\r\n      const controls = { ...state.controls, mode: CalculatorMode.PRINCIPAL_BASED_ON_ROI }\r\n      return { controls, data }\r\n    }\r\n    case 'toggleEditingCurrency': {\r\n      const currencyAfterChange =\r\n        state.controls.editingCurrency === EditingCurrency.USD ? EditingCurrency.TOKEN : EditingCurrency.USD\r\n      const controls = { ...state.controls, editingCurrency: currencyAfterChange }\r\n      return { ...state, controls }\r\n    }\r\n    default:\r\n      return state\r\n  }\r\n}\r\n\r\nconst useRoiCalculatorReducer = (\r\n  stakingTokenPrice: number,\r\n  earningTokenPrice: number,\r\n  apr: number,\r\n  autoCompoundFrequency: number,\r\n  performanceFee: number,\r\n) => {\r\n  const [state, dispatch] = useReducer(roiCalculatorReducer, initialState)\r\n  const { principalAsUSD, roiUSD } = state.data\r\n  const { compounding, compoundingFrequency, stakingDuration, mode } = state.controls\r\n\r\n  // If pool is auto-compounding set state's compounding frequency to this pool's auto-compound frequency\r\n  useEffect(() => {\r\n    if (autoCompoundFrequency > 0) {\r\n      dispatch({ type: 'setCompoundingFrequency', payload: { autoCompoundFrequency } })\r\n    }\r\n  }, [autoCompoundFrequency])\r\n\r\n  // Calculates and sets ROI whenever related values change\r\n  useEffect(() => {\r\n    if (mode === CalculatorMode.ROI_BASED_ON_PRINCIPAL) {\r\n      const principalInUSDAsNumber = parseFloat(principalAsUSD)\r\n      const compoundFrequency = compounding ? compoundingFrequency : 0\r\n      const interestBreakdown = getInterestBreakdown({\r\n        principalInUSD: principalInUSDAsNumber,\r\n        apr,\r\n        earningTokenPrice,\r\n        compoundFrequency,\r\n        performanceFee,\r\n      })\r\n      const hasInterest = !Number.isNaN(interestBreakdown[stakingDuration])\r\n      const roiTokens = hasInterest ? interestBreakdown[stakingDuration] : 0\r\n      const roiAsUSD = hasInterest ? roiTokens * earningTokenPrice : 0\r\n      const roiPercentage = hasInterest\r\n        ? getRoi({\r\n            amountEarned: roiAsUSD,\r\n            amountInvested: principalInUSDAsNumber,\r\n          })\r\n        : 0\r\n      dispatch({ type: 'setRoi', payload: { roiUSD: roiAsUSD, roiTokens, roiPercentage } })\r\n    }\r\n  }, [principalAsUSD, apr, stakingDuration, earningTokenPrice, performanceFee, compounding, compoundingFrequency, mode])\r\n\r\n  // Calculates and sets principal based on expected ROI value\r\n  useEffect(() => {\r\n    if (mode === CalculatorMode.PRINCIPAL_BASED_ON_ROI) {\r\n      const principalForExpectedRoi = getPrincipalForInterest(\r\n        roiUSD,\r\n        apr,\r\n        compounding ? compoundingFrequency : 0,\r\n        performanceFee,\r\n      )\r\n      const principalUSD = !Number.isNaN(principalForExpectedRoi[stakingDuration])\r\n        ? principalForExpectedRoi[stakingDuration]\r\n        : 0\r\n      const principalToken = new BigNumber(principalUSD).div(stakingTokenPrice)\r\n      const roiPercentage = getRoi({\r\n        amountEarned: roiUSD,\r\n        amountInvested: principalUSD,\r\n      })\r\n      dispatch({\r\n        type: 'setPrincipalForTargetRoi',\r\n        payload: {\r\n          principalAsUSD: principalUSD.toFixed(USD_PRECISION),\r\n          principalAsToken: principalToken.toFixed(TOKEN_PRECISION),\r\n          roiPercentage,\r\n        },\r\n      })\r\n    }\r\n  }, [stakingDuration, apr, compounding, compoundingFrequency, mode, roiUSD, stakingTokenPrice, performanceFee])\r\n\r\n  // Handler for compounding frequnecy buttons\r\n  const setCompoundingFrequency = (index: number) => {\r\n    dispatch({ type: 'setCompoundingFrequency', payload: { index } })\r\n  }\r\n\r\n  // Handler for principal input when in USD mode\r\n  const setPrincipalFromUSDValue = (amount: string) => {\r\n    const principalAsTokenBN = new BigNumber(amount).div(stakingTokenPrice)\r\n    const principalAsToken = principalAsTokenBN.gt(0) ? principalAsTokenBN.toFixed(TOKEN_PRECISION) : '0.00'\r\n    dispatch({ type: 'setPrincipal', payload: { principalAsUSD: amount, principalAsToken } })\r\n  }\r\n\r\n  // Handler for principal input when in Token mode\r\n  const setPrincipalFromTokenValue = useCallback(\r\n    (amount: string) => {\r\n      const principalAsUsdBN = new BigNumber(amount).times(stakingTokenPrice)\r\n      const principalAsUsdString = principalAsUsdBN.gt(0) ? principalAsUsdBN.toFixed(USD_PRECISION) : '0.00'\r\n      dispatch({\r\n        type: 'setPrincipal',\r\n        payload: { principalAsUSD: principalAsUsdString, principalAsToken: amount },\r\n      })\r\n    },\r\n    [stakingTokenPrice],\r\n  )\r\n\r\n  // Handler for staking duration buttons\r\n  const setStakingDuration = (stakingDurationIndex: number) => {\r\n    dispatch({ type: 'setStakingDuration', payload: stakingDurationIndex })\r\n  }\r\n\r\n  // Handler for compounding checkbox\r\n  const toggleCompounding = () => {\r\n    dispatch({ type: 'toggleCompounding' })\r\n  }\r\n\r\n  // Handler for principal input mode switch\r\n  const toggleEditingCurrency = () => {\r\n    dispatch({ type: 'toggleEditingCurrency' })\r\n  }\r\n\r\n  const setCalculatorMode = (modeToSet: CalculatorMode) => {\r\n    dispatch({ type: 'setCalculatorMode', payload: modeToSet })\r\n  }\r\n\r\n  // Handler for ROI input\r\n  const setTargetRoi = (amount: string) => {\r\n    const targetRoiAsTokens = new BigNumber(amount).div(earningTokenPrice)\r\n    dispatch({\r\n      type: 'setTargetRoi',\r\n      payload: { roiUSD: amount, roiTokens: targetRoiAsTokens.isNaN() ? 0 : targetRoiAsTokens.toNumber() },\r\n    })\r\n  }\r\n\r\n  return {\r\n    state,\r\n    setPrincipalFromUSDValue,\r\n    setPrincipalFromTokenValue,\r\n    setStakingDuration,\r\n    toggleCompounding,\r\n    toggleEditingCurrency,\r\n    setCompoundingFrequency,\r\n    setCalculatorMode,\r\n    setTargetRoi,\r\n  }\r\n}\r\n\r\nexport default useRoiCalculatorReducer\r\n","// Constructing the two forward-slash-separated parts of the 'Add Liquidity' URL\r\n// Each part of the url represents a different side of the LP pair.\r\nimport { getWbnbAddress } from './addressHelpers'\r\n\r\nconst getLiquidityUrlPathParts = ({ quoteTokenAddress, tokenAddress }) => {\r\n  const chainId = process.env.REACT_APP_CHAIN_ID\r\n  const wBNBAddressString = getWbnbAddress()\r\n  const quoteTokenAddressString: string = quoteTokenAddress ? quoteTokenAddress[chainId] : null\r\n  const tokenAddressString: string = tokenAddress ? tokenAddress[chainId] : null\r\n  const firstPart =\r\n    !quoteTokenAddressString || quoteTokenAddressString === wBNBAddressString ? 'BNB' : quoteTokenAddressString\r\n  const secondPart = !tokenAddressString || tokenAddressString === wBNBAddressString ? 'BNB' : tokenAddressString\r\n  return `${firstPart}/${secondPart}`\r\n}\r\n\r\nexport default getLiquidityUrlPathParts\r\n","import React from 'react'\r\nimport { useTranslation } from 'contexts/Localization'\r\nimport styled from 'styled-components'\r\nimport { Text, Flex, LinkExternal, Skeleton } from '@pancakeswap/uikit'\r\n\r\nexport interface ExpandableSectionProps {\r\n  bscScanAddress?: string\r\n  infoAddress?: string\r\n  removed?: boolean\r\n  totalValueFormatted?: string\r\n  lpLabel?: string\r\n  addLiquidityUrl?: string\r\n  isTokenOnly?: boolean\r\n}\r\n\r\nconst Wrapper = styled.div`\r\n  margin-top: 24px;\r\n`\r\n\r\nconst StyledLinkExternal = styled(LinkExternal)`\r\n  font-weight: 400;\r\n`\r\n\r\nconst DetailsSection: React.FC<ExpandableSectionProps> = ({\r\n  bscScanAddress,\r\n  infoAddress,\r\n  removed,\r\n  totalValueFormatted,\r\n  lpLabel,\r\n  addLiquidityUrl,\r\n  isTokenOnly,\r\n}) => {\r\n  const { t } = useTranslation()\r\n  return (\r\n    <Wrapper>\r\n      <Flex justifyContent=\"space-between\">\r\n        <Text>{t('Total Liquidity')}:</Text>\r\n        {totalValueFormatted ? <Text>{totalValueFormatted}</Text> : <Skeleton width={75} height={25} />}\r\n      </Flex>\r\n      {!removed && (\r\n        <StyledLinkExternal color=\"text\" href={addLiquidityUrl}>{t('Get %symbol%', { symbol: lpLabel })}</StyledLinkExternal>\r\n      )}\r\n      <StyledLinkExternal color=\"text\" href={bscScanAddress}>{t('View Contract')}</StyledLinkExternal>\r\n      {/* <StyledLinkExternal href={infoAddress}>{isTokenOnly ? t('See Token Info') : t('See Pair Info')}</StyledLinkExternal> */}\r\n    </Wrapper>\r\n  )\r\n}\r\n\r\nexport default DetailsSection\r\n","import React from 'react'\r\nimport {\r\n  Tag,\r\n  VerifiedIcon,\r\n  CommunityIcon,\r\n  RefreshIcon,\r\n  AutoRenewIcon,\r\n  TagProps,\r\n  TimerIcon,\r\n  BlockIcon,\r\n  VoteIcon,\r\n} from '@pancakeswap/uikit'\r\nimport { useTranslation } from 'contexts/Localization'\r\n\r\nconst CoreTag: React.FC<TagProps> = (props) => {\r\n  const { t } = useTranslation()\r\n  return (\r\n    <Tag variant=\"secondary\" outline startIcon={<VerifiedIcon width=\"18px\" color=\"secondary\" mr=\"4px\" />} {...props}>\r\n      {t('Core')}\r\n    </Tag>\r\n  )\r\n}\r\n\r\nconst NofeeTag: React.FC<TagProps> = (props) => {\r\n  const { t } = useTranslation()\r\n  return (\r\n    <Tag variant=\"secondary\" outline startIcon={<VerifiedIcon width=\"18px\" color=\"secondary\" mr=\"4px\" />} {...props}>\r\n      {t('No Fee')}\r\n    </Tag>\r\n  )\r\n}\r\n\r\nconst CommunityTag: React.FC<TagProps> = (props) => {\r\n  const { t } = useTranslation()\r\n  return (\r\n    <Tag variant=\"failure\" outline startIcon={<CommunityIcon width=\"18px\" color=\"failure\" mr=\"4px\" />} {...props}>\r\n      {t('Community')}\r\n    </Tag>\r\n  )\r\n}\r\n\r\nconst DualTag: React.FC<TagProps> = (props) => {\r\n  const { t } = useTranslation()\r\n  return (\r\n    <Tag variant=\"textSubtle\" outline {...props}>\r\n      {t('Dual')}\r\n    </Tag>\r\n  )\r\n}\r\n\r\nconst ManualPoolTag: React.FC<TagProps> = (props) => {\r\n  const { t } = useTranslation()\r\n  return (\r\n    <Tag variant=\"secondary\" outline startIcon={<RefreshIcon width=\"18px\" color=\"secondary\" mr=\"4px\" />} {...props}>\r\n      {t('Manual')}\r\n    </Tag>\r\n  )\r\n}\r\n\r\nconst CompoundingPoolTag: React.FC<TagProps> = (props) => {\r\n  const { t } = useTranslation()\r\n  return (\r\n    <Tag variant=\"success\" outline startIcon={<AutoRenewIcon width=\"18px\" color=\"success\" mr=\"4px\" />} {...props}>\r\n      {t('Auto')}\r\n    </Tag>\r\n  )\r\n}\r\n\r\nconst VoteNowTag: React.FC<TagProps> = (props) => {\r\n  const { t } = useTranslation()\r\n  return (\r\n    <Tag variant=\"success\" startIcon={<VoteIcon width=\"18px\" color=\"success\" mr=\"4px\" />} {...props}>\r\n      {t('Vote Now')}\r\n    </Tag>\r\n  )\r\n}\r\n\r\nconst SoonTag: React.FC<TagProps> = (props) => {\r\n  const { t } = useTranslation()\r\n  return (\r\n    <Tag variant=\"binance\" startIcon={<TimerIcon width=\"18px\" color=\"success\" mr=\"4px\" />} {...props}>\r\n      {t('Soon')}\r\n    </Tag>\r\n  )\r\n}\r\n\r\nconst ClosedTag: React.FC<TagProps> = (props) => {\r\n  const { t } = useTranslation()\r\n  return (\r\n    <Tag variant=\"textDisabled\" startIcon={<BlockIcon width=\"18px\" color=\"textDisabled\" mr=\"4px\" />} {...props}>\r\n      {t('Closed')}\r\n    </Tag>\r\n  )\r\n}\r\n\r\nexport { CoreTag, NofeeTag, CommunityTag, DualTag, ManualPoolTag, CompoundingPoolTag, VoteNowTag, SoonTag, ClosedTag }\r\n","import React from 'react'\r\nimport {\r\n  TokenPairImage as UIKitTokenPairImage,\r\n  TokenPairImageProps as UIKitTokenPairImageProps,\r\n  TokenImage as UIKitTokenImage,\r\n  ImageProps,\r\n} from '@pancakeswap/uikit'\r\nimport tokens from 'config/constants/tokens'\r\nimport { Token } from 'config/constants/types'\r\nimport { getAddress } from 'utils/addressHelpers'\r\n\r\ninterface TokenPairImageProps extends Omit<UIKitTokenPairImageProps, 'primarySrc' | 'secondarySrc'> {\r\n  primaryToken: Token\r\n  secondaryToken: Token\r\n}\r\n\r\nconst getImageUrlFromToken = (token: Token) => {\r\n  const address = getAddress(token.symbol === 'BNB' ? tokens.wbnb.address : token.address)\r\n  return `/images/tokens/${address}.svg`\r\n}\r\n\r\nexport const TokenPairImage: React.FC<TokenPairImageProps> = ({ primaryToken, secondaryToken, ...props }) => {\r\n  return (\r\n    <UIKitTokenPairImage\r\n      primarySrc={getImageUrlFromToken(primaryToken)}\r\n      secondarySrc={getImageUrlFromToken(secondaryToken)}\r\n      {...props}\r\n    />\r\n  )\r\n}\r\n\r\ninterface TokenImageProps extends ImageProps {\r\n  token: Token\r\n}\r\n\r\nexport const TokenImage: React.FC<TokenImageProps> = ({ token, ...props }) => {\r\n  return <UIKitTokenImage src={getImageUrlFromToken(token)} {...props} />\r\n}\r\n","import React from 'react'\r\nimport styled from 'styled-components'\r\nimport { Tag, Flex, Heading } from '@pancakeswap/uikit'\r\nimport { NofeeTag } from 'components/Tags'\r\nimport { Token } from 'config/constants/types'\r\nimport { TokenPairImage, TokenImage } from 'components/TokenImage'\r\n\r\nexport interface ExpandableSectionProps {\r\n  lpLabel?: string\r\n  multiplier?: string\r\n  isCommunityFarm?: boolean\r\n  token: Token\r\n  quoteToken: Token\r\n  isTokenOnly?: boolean\r\n  depositfee?: string\r\n}\r\n\r\nconst Wrapper = styled(Flex)`\r\n  svg {\r\n    margin-right: 4px;\r\n  }\r\n`\r\n\r\nconst MultiplierTag = styled(Tag)`\r\n  margin-left: 4px;\r\n`\r\n\r\nconst CardHeading: React.FC<ExpandableSectionProps> = ({ lpLabel, multiplier, token, quoteToken, isTokenOnly, depositfee }) => {\r\n  return (\r\n    <Wrapper justifyContent=\"space-between\" alignItems=\"center\" mb=\"12px\">\r\n      {\r\n        isTokenOnly ? <TokenImage token={token} width={64} height={64} /> : \r\n        <TokenPairImage variant=\"inverted\" primaryToken={token} secondaryToken={quoteToken} width={64} height={64} />\r\n      }     \r\n      <Flex flexDirection=\"column\" alignItems=\"flex-end\">\r\n        <Heading mb=\"4px\">{lpLabel.split(' ')[0]}</Heading>\r\n        <Flex justifyContent=\"center\">\r\n          {depositfee === '0%' ? <NofeeTag /> : null }\r\n          <MultiplierTag variant=\"secondary\">{multiplier}</MultiplierTag>\r\n        </Flex>\r\n      </Flex>\r\n    </Wrapper>\r\n  )\r\n}\r\n\r\nexport default CardHeading\r\n","import React, { useEffect, useRef } from 'react'\r\nimport CountUp from 'react-countup'\r\nimport { Text, TextProps } from '@pancakeswap/uikit'\r\n\r\ninterface BalanceProps extends TextProps {\r\n  value: number\r\n  decimals?: number\r\n  unit?: string\r\n  isDisabled?: boolean\r\n  prefix?: string\r\n  onClick?: (event: React.MouseEvent<HTMLElement>) => void\r\n}\r\n\r\nconst Balance: React.FC<BalanceProps> = ({\r\n  value,\r\n  color = 'text',\r\n  decimals = 3,\r\n  isDisabled = false,\r\n  unit,\r\n  prefix,\r\n  onClick,\r\n  ...props\r\n}) => {\r\n  const previousValue = useRef(0)\r\n\r\n  useEffect(() => {\r\n    previousValue.current = value\r\n  }, [value])\r\n\r\n  return (\r\n    <Text color={isDisabled ? 'textDisabled' : color} onClick={onClick} {...props}>\r\n      <CountUp\r\n        start={previousValue.current}\r\n        end={value}\r\n        prefix={prefix}\r\n        suffix={unit}\r\n        decimals={decimals}\r\n        duration={1}\r\n        separator=\",\"\r\n      />\r\n    </Text>\r\n  )\r\n}\r\n\r\nexport default Balance\r\n","import React, { useContext } from 'react'\r\nimport styled, { ThemeContext } from 'styled-components'\r\n\r\ninterface SpacerProps {\r\n  size?: 'sm' | 'md' | 'lg'\r\n}\r\n\r\nconst Spacer: React.FC<SpacerProps> = ({ size = 'md' }) => {\r\n  const { spacing } = useContext(ThemeContext)\r\n\r\n  let s: number\r\n  switch (size) {\r\n    case 'lg':\r\n      s = spacing[6]\r\n      break\r\n    case 'sm':\r\n      s = spacing[2]\r\n      break\r\n    case 'md':\r\n    default:\r\n      s = spacing[4]\r\n  }\r\n\r\n  return <StyledSpacer size={s} />\r\n}\r\n\r\ninterface StyledSpacerProps {\r\n  size: number\r\n}\r\n\r\nconst StyledSpacer = styled.div<StyledSpacerProps>`\r\n  height: ${(props) => props.size}px;\r\n  width: ${(props) => props.size}px;\r\n`\r\n\r\nexport default Spacer\r\n","import React from 'react'\r\nimport styled from 'styled-components'\r\nimport Spacer from './Spacer'\r\n\r\nconst ModalActions: React.FC = ({ children }) => {\r\n  const l = React.Children.toArray(children).length\r\n  return (\r\n    <StyledModalActions>\r\n      {React.Children.map(children, (child, i) => (\r\n        <>\r\n          <StyledModalAction>{child}</StyledModalAction>\r\n          {i < l - 1 && <Spacer />}\r\n        </>\r\n      ))}\r\n    </StyledModalActions>\r\n  )\r\n}\r\n\r\nconst StyledModalActions = styled.div`\r\n  align-items: center;\r\n  background-color: ${(props) => props.theme.colors.primaryDark}00;\r\n  display: flex;\r\n  margin: 0;\r\n  padding: ${(props) => props.theme.spacing[4]}px 0;\r\n`\r\n\r\nconst StyledModalAction = styled.div`\r\n  flex: 1;\r\n`\r\n\r\nexport default ModalActions\r\n","import React from 'react'\r\nimport styled from 'styled-components'\r\nimport { Text, Button, Input, InputProps, Flex, Link } from '@pancakeswap/uikit'\r\nimport { useTranslation } from 'contexts/Localization'\r\nimport { BigNumber } from 'bignumber.js'\r\n\r\ninterface ModalInputProps {\r\n  max: string\r\n  symbol: string\r\n  onSelectMax?: () => void\r\n  onChange: (e: React.FormEvent<HTMLInputElement>) => void\r\n  placeholder?: string\r\n  value: string\r\n  addLiquidityUrl?: string\r\n  inputTitle?: string\r\n  decimals?: number\r\n}\r\n\r\nconst getBoxShadow = ({ isWarning = false, theme }) => {\r\n  if (isWarning) {\r\n    return theme.shadows.warning\r\n  }\r\n\r\n  return theme.shadows.inset\r\n}\r\n\r\nconst StyledTokenInput = styled.div<InputProps>`\r\n  display: flex;\r\n  flex-direction: column;\r\n  background-color: ${({ theme }) => theme.colors.input};\r\n  border-radius: 16px;\r\n  box-shadow: ${getBoxShadow};\r\n  color: ${({ theme }) => theme.colors.text};\r\n  padding: 8px 16px 8px 0;\r\n  width: 100%;\r\n`\r\n\r\nconst StyledInput = styled(Input)`\r\n  box-shadow: none;\r\n  width: 60px;\r\n  margin: 0 8px;\r\n  padding: 0 8px;\r\n  border: none;\r\n\r\n  ${({ theme }) => theme.mediaQueries.xs} {\r\n    width: 80px;\r\n  }\r\n\r\n  ${({ theme }) => theme.mediaQueries.sm} {\r\n    width: auto;\r\n  }\r\n`\r\n\r\nconst StyledErrorMessage = styled(Text)`\r\n  position: absolute;\r\n  bottom: -22px;\r\n  a {\r\n    display: inline;\r\n  }\r\n`\r\n\r\nconst ModalInput: React.FC<ModalInputProps> = ({\r\n  max,\r\n  symbol,\r\n  onChange,\r\n  onSelectMax,\r\n  value,\r\n  addLiquidityUrl,\r\n  inputTitle,\r\n  decimals,\r\n}) => {\r\n  const { t } = useTranslation()\r\n  const isBalanceZero = max === '0' || !max\r\n\r\n  const displayBalance = (balance: string) => {\r\n    if (isBalanceZero) {\r\n      return '0'\r\n    }\r\n    const balanceBigNumber = new BigNumber(balance)\r\n    if (balanceBigNumber.gt(0) && balanceBigNumber.lt(0.0001)) {\r\n      return balanceBigNumber.toLocaleString()\r\n    }\r\n    return balanceBigNumber.toFixed(3, BigNumber.ROUND_DOWN)\r\n  }\r\n\r\n  return (\r\n    <div style={{ position: 'relative' }}>\r\n      <StyledTokenInput isWarning={isBalanceZero}>\r\n        <Flex justifyContent=\"space-between\" pl=\"16px\">\r\n          <Text fontSize=\"14px\">{inputTitle}</Text>\r\n          <Text fontSize=\"14px\">{t('Balance: %balance%', { balance: displayBalance(max) })}</Text>\r\n        </Flex>\r\n        <Flex alignItems=\"flex-end\" justifyContent=\"space-around\">\r\n          <StyledInput\r\n            pattern={`^[0-9]*[.,]?[0-9]{0,${decimals}}$`}\r\n            inputMode=\"decimal\"\r\n            step=\"any\"\r\n            min=\"0\"\r\n            onChange={onChange}\r\n            placeholder=\"0\"\r\n            value={value}\r\n          />\r\n          <Button scale=\"sm\" onClick={onSelectMax} mr=\"8px\"  >\r\n            {t('Max')}\r\n          </Button>\r\n          <Text fontSize=\"16px\">{symbol}</Text>\r\n        </Flex>\r\n      </StyledTokenInput>\r\n      {isBalanceZero && (\r\n        <StyledErrorMessage fontSize=\"14px\" color=\"failure\">\r\n          {t('No tokens to stake')}:{' '}\r\n          <Link fontSize=\"14px\" bold={false} href={addLiquidityUrl} external color=\"failure\">\r\n            {t('Get %symbol%', { symbol })}\r\n          </Link>\r\n        </StyledErrorMessage>\r\n      )}\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default ModalInput\r\n","import React, { useState } from 'react'\r\nimport styled from 'styled-components'\r\nimport { Flex, Box, Text, ExpandableLabel, LinkExternal, Grid, HelpIcon, useTooltip } from '@pancakeswap/uikit'\r\nimport { useTranslation } from 'contexts/Localization'\r\nimport { getApy } from 'utils/compoundApyHelpers'\r\n\r\nconst Footer = styled(Flex)`\r\n  width: 100%;\r\n  background: ${({ theme }) => theme.colors.dropdown};\r\n`\r\n\r\nconst BulletList = styled.ul`\r\n  list-style-type: none;\r\n  margin-top: 16px;\r\n  padding: 0;\r\n  li {\r\n    margin: 0;\r\n    padding: 0;\r\n  }\r\n  li::before {\r\n    content: '•';\r\n    margin-right: 4px;\r\n    color: ${({ theme }) => theme.colors.textSubtle};\r\n  }\r\n  li::marker {\r\n    font-size: 12px;\r\n  }\r\n`\r\n\r\ninterface RoiCalculatorFooterProps {\r\n  isFarm: boolean\r\n  apr: number\r\n  displayApr: string\r\n  autoCompoundFrequency: number\r\n  multiplier: string\r\n  linkLabel: string\r\n  linkHref: string\r\n  performanceFee: number\r\n}\r\n\r\nconst RoiCalculatorFooter: React.FC<RoiCalculatorFooterProps> = ({\r\n  isFarm,\r\n  apr,\r\n  displayApr,\r\n  autoCompoundFrequency,\r\n  multiplier,\r\n  linkLabel,\r\n  linkHref,\r\n  performanceFee,\r\n}) => {\r\n  const [isExpanded, setIsExpanded] = useState(false)\r\n  const { t } = useTranslation()\r\n  const {\r\n    targetRef: multiplierRef,\r\n    tooltip: multiplierTooltip,\r\n    tooltipVisible: multiplierTooltipVisible,\r\n  } = useTooltip(\r\n    <>\r\n      <Text>\r\n        {t(\r\n          'The Multiplier represents the proportion of LOKI rewards each farm receives, as a proportion of the LOKI produced each block.',\r\n        )}\r\n      </Text>\r\n      <Text my=\"24px\">\r\n        {t('For example, if a 1x farm received 1 LOKI per block, a 40x farm would receive 40 LOKI per block.')}\r\n      </Text>\r\n      <Text>{t('This amount is already included in all APR calculations for the farm.')}</Text>\r\n    </>,\r\n    { placement: 'top-end', tooltipOffset: [20, 10] },\r\n  )\r\n\r\n  const gridRowCount = isFarm ? 4 : 2\r\n  const apy = (getApy(apr, autoCompoundFrequency > 0 ? autoCompoundFrequency : 1, 365, performanceFee) * 100).toFixed(2)\r\n\r\n  return (\r\n    <Footer p=\"16px\" flexDirection=\"column\">\r\n      <ExpandableLabel expanded={isExpanded} onClick={() => setIsExpanded((prev) => !prev)}>\r\n        {isExpanded ? t('Hide') : t('Details')}\r\n      </ExpandableLabel>\r\n      {isExpanded && (\r\n        <Box px=\"8px\">\r\n          <Grid gridTemplateColumns=\"2.5fr 1fr\" gridRowGap=\"8px\" gridTemplateRows={`repeat(${gridRowCount}, auto)`}>\r\n            {isFarm && (\r\n              <>\r\n                <Text color=\"textSubtle\" small>\r\n                  {t('APR (incl. LP rewards)')}\r\n                </Text>\r\n                <Text small textAlign=\"right\">\r\n                  {displayApr}%\r\n                </Text>\r\n              </>\r\n            )}\r\n            <Text color=\"textSubtle\" small>\r\n              {isFarm ? t('Base APR (LOKI yield only)') : t('APR')}\r\n            </Text>\r\n            <Text small textAlign=\"right\">\r\n              {apr.toFixed(2)}%\r\n            </Text>\r\n            <Text color=\"textSubtle\" small>\r\n              {t('APY (%compoundTimes%x daily compound)', {\r\n                compoundTimes: autoCompoundFrequency > 0 ? autoCompoundFrequency : 1,\r\n              })}\r\n            </Text>\r\n            <Text small textAlign=\"right\">\r\n              {apy}%\r\n            </Text>\r\n            {isFarm && (\r\n              <>\r\n                <Text color=\"textSubtle\" small>\r\n                  {t('Farm Multiplier')}\r\n                </Text>\r\n                <Flex justifyContent=\"flex-end\" alignItems=\"flex-end\">\r\n                  <Text small textAlign=\"right\" mr=\"4px\">\r\n                    {multiplier}\r\n                  </Text>\r\n                  <span ref={multiplierRef}>\r\n                    <HelpIcon color=\"textSubtle\" width=\"16px\" height=\"16px\" />\r\n                  </span>\r\n                  {multiplierTooltipVisible && multiplierTooltip}\r\n                </Flex>\r\n              </>\r\n            )}\r\n          </Grid>\r\n          <BulletList>\r\n            <li>\r\n              <Text fontSize=\"12px\" textAlign=\"center\" color=\"textSubtle\" display=\"inline\">\r\n                {t('Calculated based on current rates.')}\r\n              </Text>\r\n            </li>\r\n            {isFarm && (\r\n              <li>\r\n                <Text fontSize=\"12px\" textAlign=\"center\" color=\"textSubtle\" display=\"inline\">\r\n                  {t('LP rewards: 0.17% trading fees, distributed proportionally among LP token holders.')}\r\n                </Text>\r\n              </li>\r\n            )}\r\n            <li>\r\n              <Text fontSize=\"12px\" textAlign=\"center\" color=\"textSubtle\" display=\"inline\">\r\n                {t(\r\n                  'All figures are estimates provided for your convenience only, and by no means represent guaranteed returns.',\r\n                )}\r\n              </Text>\r\n            </li>\r\n            {performanceFee > 0 && (\r\n              <li>\r\n                <Text mt=\"14px\" fontSize=\"12px\" textAlign=\"center\" color=\"textSubtle\" display=\"inline\">\r\n                  {t('All estimated rates take into account this pool’s %fee%% performance fee', {\r\n                    fee: performanceFee,\r\n                  })}\r\n                </Text>\r\n              </li>\r\n            )}\r\n          </BulletList>\r\n          <Flex justifyContent=\"center\" mt=\"24px\">\r\n            <LinkExternal href={linkHref}>{linkLabel}</LinkExternal>\r\n          </Flex>\r\n        </Box>\r\n      )}\r\n    </Footer>\r\n  )\r\n}\r\n\r\nexport default RoiCalculatorFooter\r\n","export type TableProps = {\r\n  data?: TableDataTypes[]\r\n  selectedFilters?: string\r\n  sortBy?: string\r\n  sortDir?: string\r\n  onSort?: (value: string) => void\r\n}\r\n\r\nexport type ColumnsDefTypes = {\r\n  id: number\r\n  label: string\r\n  name: string\r\n  sortable: boolean\r\n}\r\n\r\nexport type ScrollBarProps = {\r\n  ref: string\r\n  width: number\r\n}\r\n\r\nexport type TableDataTypes = {\r\n  POOL: string\r\n  APR: string\r\n  EARNED: string\r\n  STAKED: string\r\n  DETAILS: string\r\n  LINKS: string\r\n}\r\n\r\nexport const MobileColumnSchema: ColumnsDefTypes[] = [\r\n  {\r\n    id: 1,\r\n    name: 'farm',\r\n    sortable: true,\r\n    label: '',\r\n  },\r\n  {\r\n    id: 2,\r\n    name: 'earned',\r\n    sortable: true,\r\n    label: 'Earned',\r\n  },\r\n  {\r\n    id: 3,\r\n    name: 'apr',\r\n    sortable: true,\r\n    label: 'APR',\r\n  },\r\n  {\r\n    id: 6,\r\n    name: 'details',\r\n    sortable: true,\r\n    label: '',\r\n  },\r\n]\r\n\r\nexport const DesktopColumnSchema: ColumnsDefTypes[] = [\r\n  {\r\n    id: 1,\r\n    name: 'farm',\r\n    sortable: true,\r\n    label: '',\r\n  },\r\n  {\r\n    id: 2,\r\n    name: 'earned',\r\n    sortable: true,\r\n    label: 'Earned',\r\n  },\r\n  {\r\n    id: 3,\r\n    name: 'apr',\r\n    sortable: true,\r\n    label: 'APR',\r\n  },\r\n  {\r\n    id: 4,\r\n    name: 'liquidity',\r\n    sortable: true,\r\n    label: 'Liquidity',\r\n  },\r\n  {\r\n    id: 5,\r\n    name: 'multiplier',\r\n    sortable: true,\r\n    label: 'Multiplier',\r\n  },\r\n  {\r\n    id: 6,\r\n    name: 'details',\r\n    sortable: true,\r\n    label: '',\r\n  },\r\n]\r\n\r\nexport enum ViewMode {\r\n  'TABLE' = 'TABLE',\r\n  'CARD' = 'CARD',\r\n}\r\n","import React, { useRef, useEffect } from 'react'\r\nimport styled from 'styled-components'\r\nimport { Box, Flex, Text, Input, CheckmarkIcon, PencilIcon, IconButton } from '@pancakeswap/uikit'\r\nimport { useTranslation } from 'contexts/Localization'\r\nimport { CalculatorMode, RoiCalculatorReducerState } from './useRoiCalculatorReducer'\r\n\r\nconst MILLION = 1000000\r\nconst TRILLION = 1000000000000\r\n\r\nconst RoiCardWrapper = styled(Box)`\r\n  background: linear-gradient(180deg, #53dee9, #7645d9);\r\n  padding: 1px;\r\n  width: 100%;\r\n  border-radius: ${({ theme }) => theme.radii.default};\r\n`\r\n\r\nconst RoiCardInner = styled(Box)`\r\n  height: 120px;\r\n  padding: 24px;\r\n  border-radius: ${({ theme }) => theme.radii.default};\r\n  background: ${({ theme }) => theme.colors.gradients.bubblegum};\r\n`\r\n\r\nconst RoiInputContainer = styled(Box)`\r\n  position: relative;\r\n  & > input {\r\n    padding-left: 28px;\r\n    max-width: 70%;\r\n  }\r\n  &:before {\r\n    position: absolute;\r\n    content: '$';\r\n    color: ${({ theme }) => theme.colors.textSubtle};\r\n    left: 16px;\r\n    top: 8px;\r\n  }\r\n`\r\n\r\nconst RoiDisplayContainer = styled(Flex)`\r\n  max-width: 82%;\r\n  margin-right: 8px;\r\n`\r\n\r\nconst RoiDollarAmount = styled(Text)<{ fadeOut: boolean }>`\r\n  position: relative;\r\n  overflow-x: auto;\r\n  &::-webkit-scrollbar {\r\n    height: 0px;\r\n  }\r\n\r\n  ${({ fadeOut, theme }) =>\r\n    fadeOut &&\r\n    `\r\n      &:after {\r\n        background: linear-gradient(\r\n          to right,\r\n          ${theme.colors.background}00,\r\n          ${theme.colors.background}E6\r\n        );\r\n        content: '';\r\n        height: 100%;\r\n        pointer-events: none;\r\n        position: absolute;\r\n        right: 0;\r\n        top: 0;\r\n        width: 40px;\r\n      }\r\n  `}\r\n`\r\n\r\ninterface RoiCardProps {\r\n  earningTokenSymbol: string\r\n  calculatorState: RoiCalculatorReducerState\r\n  setTargetRoi: (amount: string) => void\r\n  setCalculatorMode: (mode: CalculatorMode) => void\r\n}\r\n\r\nconst RoiCard: React.FC<RoiCardProps> = ({ earningTokenSymbol, calculatorState, setTargetRoi, setCalculatorMode }) => {\r\n  const inputRef = useRef<HTMLInputElement | null>(null)\r\n  const { roiUSD, roiTokens, roiPercentage } = calculatorState.data\r\n  const { mode } = calculatorState.controls\r\n\r\n  const { t } = useTranslation()\r\n\r\n  useEffect(() => {\r\n    if (mode === CalculatorMode.PRINCIPAL_BASED_ON_ROI && inputRef.current) {\r\n      inputRef.current.focus()\r\n    }\r\n  }, [mode])\r\n\r\n  const onEnterEditing = () => {\r\n    setCalculatorMode(CalculatorMode.PRINCIPAL_BASED_ON_ROI)\r\n  }\r\n\r\n  const onExitRoiEditing = () => {\r\n    setCalculatorMode(CalculatorMode.ROI_BASED_ON_PRINCIPAL)\r\n  }\r\n  const handleExpectedRoiChange = (event: React.ChangeEvent<HTMLInputElement>) => {\r\n    setTargetRoi(event.currentTarget.value)\r\n  }\r\n  return (\r\n    <RoiCardWrapper>\r\n      <RoiCardInner>\r\n        <Text fontSize=\"12px\" color=\"secondary\" bold textTransform=\"uppercase\">\r\n          {t('ROI at current rates')}\r\n        </Text>\r\n        <Flex justifyContent=\"space-between\" mt=\"4px\" height=\"36px\">\r\n          {mode === CalculatorMode.PRINCIPAL_BASED_ON_ROI ? (\r\n            <>\r\n              <RoiInputContainer>\r\n                <Input\r\n                  ref={inputRef}\r\n                  type=\"number\"\r\n                  inputMode=\"decimal\"\r\n                  pattern=\"\\d*\"\r\n                  scale=\"sm\"\r\n                  value={roiUSD}\r\n                  placeholder=\"0.0\"\r\n                  onChange={handleExpectedRoiChange}\r\n                />\r\n              </RoiInputContainer>\r\n              <IconButton scale=\"sm\" variant=\"text\" onClick={onExitRoiEditing}>\r\n                <CheckmarkIcon color=\"primary\" />\r\n              </IconButton>\r\n            </>\r\n          ) : (\r\n            <>\r\n              <RoiDisplayContainer onClick={onEnterEditing}>\r\n                {/* Dollar sign is separate cause its not supposed to scroll with a number if number is huge */}\r\n                <Text fontSize=\"24px\" bold>\r\n                  $\r\n                </Text>\r\n                <RoiDollarAmount fontSize=\"24px\" bold fadeOut={roiUSD > TRILLION}>\r\n                  {roiUSD.toLocaleString('en', {\r\n                    minimumFractionDigits: roiUSD > MILLION ? 0 : 2,\r\n                    maximumFractionDigits: roiUSD > MILLION ? 0 : 2,\r\n                  })}\r\n                </RoiDollarAmount>\r\n              </RoiDisplayContainer>\r\n              <IconButton scale=\"sm\" variant=\"text\" onClick={onEnterEditing}>\r\n                <PencilIcon color=\"primary\" />\r\n              </IconButton>\r\n            </>\r\n          )}\r\n        </Flex>\r\n        <Text fontSize=\"12px\" color=\"textSubtle\">\r\n          ~ {roiTokens} {earningTokenSymbol} (\r\n          {roiPercentage.toLocaleString('en', { minimumFractionDigits: 2, maximumFractionDigits: 2 })}\r\n          %)\r\n        </Text>\r\n      </RoiCardInner>\r\n    </RoiCardWrapper>\r\n  )\r\n}\r\n\r\nexport default RoiCard\r\n","import React, { useState, useEffect } from 'react'\r\nimport { Flex, ArrowDownIcon, ArrowUpIcon } from '@pancakeswap/uikit'\r\nimport styled, { keyframes } from 'styled-components'\r\nimport { CalculatorMode, RoiCalculatorReducerState } from './useRoiCalculatorReducer'\r\n\r\nconst rotate = keyframes`\r\n  0% {\r\n    transform: scale(1);\r\n    stroke-width: 0;\r\n  }\r\n  50% {\r\n    transform: scale(1.3);\r\n    stroke-width: 2;\r\n  }\r\n  100% {\r\n    transform: scale(1);\r\n    stroke-width: 0;\r\n  }\r\n`\r\n\r\nconst ArrowContainer = styled(Flex)`\r\n  & > svg {\r\n    animation: 0.2s ${rotate} linear;\r\n    stroke: ${({ theme }) => `${theme.colors.primary}3D`};\r\n    stroke-width: 0;\r\n  }\r\n`\r\n\r\ninterface AnimatedArrowProps {\r\n  calculatorState: RoiCalculatorReducerState\r\n}\r\n\r\nconst AnimatedArrow: React.FC<AnimatedArrowProps> = ({ calculatorState }) => {\r\n  const [key, setKey] = useState('roiArrow-0')\r\n  const { mode } = calculatorState.controls\r\n\r\n  // Trigger animation on state change\r\n  useEffect(() => {\r\n    setKey((prevKey) => {\r\n      const prevId = parseInt(prevKey.split('-')[1], 10)\r\n      return `roiArrow-${prevId + 1}`\r\n    })\r\n  }, [calculatorState])\r\n\r\n  return (\r\n    <ArrowContainer justifyContent=\"center\" my=\"24px\" key={key}>\r\n      {mode === CalculatorMode.ROI_BASED_ON_PRINCIPAL ? (\r\n        <ArrowDownIcon width=\"24px\" height=\"24px\" color=\"textSubtle\" />\r\n      ) : (\r\n        <ArrowUpIcon width=\"24px\" height=\"24px\" color=\"textSubtle\" />\r\n      )}\r\n    </ArrowContainer>\r\n  )\r\n}\r\n\r\nexport default AnimatedArrow\r\n","import React, { useRef, useEffect } from 'react'\r\nimport styled from 'styled-components'\r\nimport {\r\n  Modal,\r\n  Text,\r\n  Button,\r\n  Flex,\r\n  ButtonMenu,\r\n  Checkbox,\r\n  BalanceInput,\r\n  HelpIcon,\r\n  ButtonMenuItem,\r\n  useTooltip,\r\n} from '@pancakeswap/uikit'\r\nimport BigNumber from 'bignumber.js'\r\nimport { useTranslation } from 'contexts/Localization'\r\nimport { getBalanceNumber } from 'utils/formatBalance'\r\nimport useActiveWeb3React from 'hooks/useActiveWeb3React'\r\nimport RoiCalculatorFooter from './RoiCalculatorFooter'\r\nimport RoiCard from './RoiCard'\r\nimport useRoiCalculatorReducer, { CalculatorMode, EditingCurrency } from './useRoiCalculatorReducer'\r\nimport AnimatedArrow from './AnimatedArrow'\r\n\r\ninterface RoiCalculatorModalProps {\r\n  onDismiss?: () => void\r\n  onBack?: () => void\r\n  earningTokenPrice: number\r\n  apr: number\r\n  displayApr?: string\r\n  linkLabel: string\r\n  linkHref: string\r\n  stakingTokenBalance: BigNumber\r\n  stakingTokenSymbol: string\r\n  stakingTokenPrice: number\r\n  earningTokenSymbol?: string\r\n  multiplier?: string\r\n  autoCompoundFrequency?: number\r\n  performanceFee?: number\r\n  isFarm?: boolean\r\n  initialValue?: string\r\n}\r\n\r\nconst StyledModal = styled(Modal)`\r\n  width: 345px;\r\n  & > :nth-child(2) {\r\n    padding: 0;\r\n  }\r\n`\r\n\r\nconst ScrollableContainer = styled.div`\r\n  padding: 24px;\r\n  max-height: 500px;\r\n  overflow-y: auto;\r\n  ${({ theme }) => theme.mediaQueries.sm} {\r\n    max-height: none;\r\n  }\r\n`\r\n\r\nconst FullWidthButtonMenu = styled(ButtonMenu)<{ disabled?: boolean }>`\r\n  width: 100%;\r\n\r\n  & > button {\r\n    width: 100%;\r\n  }\r\n\r\n  opacity: ${({ disabled }) => (disabled ? 0.5 : 1)};\r\n`\r\n\r\nconst RoiCalculatorModal: React.FC<RoiCalculatorModalProps> = ({\r\n  onDismiss,\r\n  onBack,\r\n  earningTokenPrice,\r\n  apr,\r\n  displayApr,\r\n  linkLabel,\r\n  linkHref,\r\n  stakingTokenBalance,\r\n  stakingTokenSymbol,\r\n  stakingTokenPrice,\r\n  multiplier,\r\n  initialValue,\r\n  earningTokenSymbol = 'LOKI',\r\n  autoCompoundFrequency = 0,\r\n  performanceFee = 0,\r\n  isFarm = false,\r\n}) => {\r\n  const { t } = useTranslation()\r\n  const { account } = useActiveWeb3React()\r\n  const balanceInputRef = useRef<HTMLInputElement | null>(null)\r\n  console.log('debug->roi', stakingTokenPrice)\r\n  console.log('debug->roi', earningTokenPrice)\r\n  console.log('debug->roi', apr)\r\n  const {\r\n    state,\r\n    setPrincipalFromUSDValue,\r\n    setPrincipalFromTokenValue,\r\n    setStakingDuration,\r\n    toggleCompounding,\r\n    toggleEditingCurrency,\r\n    setCompoundingFrequency,\r\n    setCalculatorMode,\r\n    setTargetRoi,\r\n  } = useRoiCalculatorReducer(stakingTokenPrice, earningTokenPrice, apr, autoCompoundFrequency, performanceFee)\r\n\r\n  const { compounding, activeCompoundingIndex, stakingDuration, editingCurrency } = state.controls\r\n  const { principalAsUSD, principalAsToken } = state.data\r\n\r\n  // Auto-focus input on opening modal\r\n  useEffect(() => {\r\n    if (balanceInputRef.current) {\r\n      balanceInputRef.current.focus()\r\n    }\r\n  }, [])\r\n\r\n  // If user comes to calculator from staking modal - initialize with whatever they put in there\r\n  useEffect(() => {\r\n    if (initialValue) {\r\n      setPrincipalFromTokenValue(initialValue)\r\n    }\r\n  }, [initialValue, setPrincipalFromTokenValue])\r\n\r\n  const { targetRef, tooltip, tooltipVisible } = useTooltip(\r\n    isFarm\r\n      ? t('“My Balance” here includes both LP Tokens in your wallet, and LP Tokens already staked in this farm.')\r\n      : t(\r\n          '“My Balance” here includes both %assetSymbol% in your wallet, and %assetSymbol% already staked in this pool.',\r\n          { assetSymbol: stakingTokenSymbol },\r\n        ),\r\n    { placement: 'top-end', tooltipOffset: [20, 10] },\r\n  )\r\n\r\n  const onBalanceFocus = () => {\r\n    setCalculatorMode(CalculatorMode.ROI_BASED_ON_PRINCIPAL)\r\n  }\r\n\r\n  const editingUnit = editingCurrency === EditingCurrency.TOKEN ? stakingTokenSymbol : 'USD'\r\n  const editingValue = editingCurrency === EditingCurrency.TOKEN ? principalAsToken : principalAsUSD\r\n  const conversionUnit = editingCurrency === EditingCurrency.TOKEN ? 'USD' : stakingTokenSymbol\r\n  const conversionValue = editingCurrency === EditingCurrency.TOKEN ? principalAsUSD : principalAsToken\r\n  const onUserInput = editingCurrency === EditingCurrency.TOKEN ? setPrincipalFromTokenValue : setPrincipalFromUSDValue\r\n\r\n  return (\r\n    <StyledModal\r\n      title={t('ROI Calculator')}\r\n      onDismiss={onBack || onDismiss}\r\n      onBack={onBack ?? null}\r\n      headerBackground=\"gradients.cardHeader\"\r\n    >\r\n      <ScrollableContainer>\r\n        <Flex flexDirection=\"column\" mb=\"8px\">\r\n          <Text color=\"secondary\" bold fontSize=\"12px\" textTransform=\"uppercase\">\r\n            {t('%asset% staked', { asset: stakingTokenSymbol })}\r\n          </Text>\r\n          <BalanceInput\r\n            currencyValue={`${conversionValue} ${conversionUnit}`}\r\n            innerRef={balanceInputRef}\r\n            placeholder=\"0.00\"\r\n            value={editingValue}\r\n            unit={editingUnit}\r\n            onUserInput={onUserInput}\r\n            switchEditingUnits={toggleEditingCurrency}\r\n            onFocus={onBalanceFocus}\r\n          />\r\n          <Flex justifyContent=\"space-between\" mt=\"8px\">\r\n            <Button\r\n              scale=\"xs\"\r\n              p=\"4px 16px\"\r\n              width=\"68px\"\r\n              variant=\"tertiary\"\r\n              onClick={() => setPrincipalFromUSDValue('100')}\r\n            >\r\n              $100\r\n            </Button>\r\n            <Button\r\n              scale=\"xs\"\r\n              p=\"4px 16px\"\r\n              width=\"68px\"\r\n              variant=\"tertiary\"\r\n              onClick={() => setPrincipalFromUSDValue('1000')}\r\n            >\r\n              $1000\r\n            </Button>\r\n            <Button\r\n              disabled={stakingTokenBalance.lte(0) || !account}\r\n              scale=\"xs\"\r\n              p=\"4px 16px\"\r\n              width=\"128px\"\r\n              variant=\"tertiary\"\r\n              onClick={() =>\r\n                setPrincipalFromUSDValue(getBalanceNumber(stakingTokenBalance.times(stakingTokenPrice)).toString())\r\n              }\r\n            >\r\n              {t('My Balance').toLocaleUpperCase()}\r\n            </Button>\r\n            <span ref={targetRef}>\r\n              <HelpIcon width=\"16px\" height=\"16px\" color=\"textSubtle\" />\r\n            </span>\r\n            {tooltipVisible && tooltip}\r\n          </Flex>\r\n          <Text mt=\"24px\" color=\"secondary\" bold fontSize=\"12px\" textTransform=\"uppercase\">\r\n            {t('Staked for')}\r\n          </Text>\r\n          <FullWidthButtonMenu activeIndex={stakingDuration} onItemClick={setStakingDuration} scale=\"sm\">\r\n            <ButtonMenuItem variant=\"tertiary\">{t('1D')}</ButtonMenuItem>\r\n            <ButtonMenuItem variant=\"tertiary\">{t('7D')}</ButtonMenuItem>\r\n            <ButtonMenuItem variant=\"tertiary\">{t('30D')}</ButtonMenuItem>\r\n            <ButtonMenuItem variant=\"tertiary\">{t('1Y')}</ButtonMenuItem>\r\n            <ButtonMenuItem variant=\"tertiary\">{t('5Y')}</ButtonMenuItem>\r\n          </FullWidthButtonMenu>\r\n        </Flex>\r\n        <AnimatedArrow calculatorState={state} />\r\n        <Flex>\r\n          <RoiCard\r\n            earningTokenSymbol={earningTokenSymbol}\r\n            calculatorState={state}\r\n            setTargetRoi={setTargetRoi}\r\n            setCalculatorMode={setCalculatorMode}\r\n          />\r\n        </Flex>\r\n      </ScrollableContainer>\r\n      <RoiCalculatorFooter\r\n        isFarm={isFarm}\r\n        apr={apr}\r\n        displayApr={displayApr}\r\n        autoCompoundFrequency={autoCompoundFrequency}\r\n        multiplier={multiplier}\r\n        linkLabel={linkLabel}\r\n        linkHref={linkHref}\r\n        performanceFee={performanceFee}\r\n      />\r\n    </StyledModal>\r\n  )\r\n}\r\n\r\nexport default RoiCalculatorModal\r\n","import BigNumber from 'bignumber.js'\r\nimport React, { useCallback, useMemo, useState } from 'react'\r\nimport styled from 'styled-components'\r\nimport { Flex, Text, Button, Modal, LinkExternal, CalculateIcon, IconButton } from '@pancakeswap/uikit'\r\nimport { ModalActions, ModalInput } from 'components/Modal'\r\nimport RoiCalculatorModal from 'components/RoiCalculatorModal'\r\nimport { useTranslation } from 'contexts/Localization'\r\nimport { getFullDisplayBalance, formatNumber } from 'utils/formatBalance'\r\nimport useToast from 'hooks/useToast'\r\nimport { getInterestBreakdown } from 'utils/compoundApyHelpers'\r\n\r\nconst AnnualRoiContainer = styled(Flex)`\r\n  cursor: pointer;\r\n`\r\n\r\nconst AnnualRoiDisplay = styled(Text)`\r\n  width: 72px;\r\n  max-width: 72px;\r\n  overflow: hidden;\r\n  text-align: right;\r\n  text-overflow: ellipsis;\r\n`\r\n\r\ninterface DepositModalProps {\r\n  max: BigNumber\r\n  stakedBalance: BigNumber\r\n  multiplier?: string\r\n  lpPrice: BigNumber\r\n  lpLabel?: string\r\n  onConfirm: (amount: string) => void\r\n  onDismiss?: () => void\r\n  tokenName?: string\r\n  apr?: number\r\n  displayApr?: string\r\n  addLiquidityUrl?: string\r\n  cakePrice?: BigNumber\r\n  isTokenOnly?: boolean\r\n  decimals?: number\r\n}\r\n\r\nconst DepositModal: React.FC<DepositModalProps> = ({\r\n  max,\r\n  stakedBalance,\r\n  onConfirm,\r\n  onDismiss,\r\n  tokenName = '',\r\n  multiplier,\r\n  displayApr,\r\n  lpPrice,\r\n  lpLabel,\r\n  apr,\r\n  addLiquidityUrl,\r\n  cakePrice,\r\n  isTokenOnly,\r\n  decimals,\r\n}) => {\r\n  const [val, setVal] = useState('')\r\n  const { toastSuccess, toastError } = useToast()\r\n  const [pendingTx, setPendingTx] = useState(false)\r\n  const [showRoiCalculator, setShowRoiCalculator] = useState(false)\r\n  const { t } = useTranslation()\r\n  const fullBalance = useMemo(() => {\r\n    return getFullDisplayBalance(max, decimals)\r\n  }, [max, decimals])\r\n\r\n  const lpTokensToStake = new BigNumber(val)\r\n  const fullBalanceNumber = new BigNumber(fullBalance)\r\n\r\n  const usdToStake = lpTokensToStake.times(lpPrice)\r\n\r\n  const interestBreakdown = getInterestBreakdown({\r\n    principalInUSD: !lpTokensToStake.isNaN() ? usdToStake.toNumber() : 0,\r\n    apr,\r\n    earningTokenPrice: cakePrice.toNumber(),\r\n  })\r\n\r\n  const annualRoi = cakePrice.times(interestBreakdown[3])\r\n  const formattedAnnualRoi = formatNumber(\r\n    annualRoi.toNumber(),\r\n    annualRoi.gt(10000) ? 0 : 2,\r\n    annualRoi.gt(10000) ? 0 : 2,\r\n  )\r\n\r\n  const handleChange = useCallback(\r\n    (e: React.FormEvent<HTMLInputElement>) => {\r\n      if (e.currentTarget.validity.valid) {\r\n        setVal(e.currentTarget.value.replace(/,/g, '.'))\r\n      }\r\n    },\r\n    [setVal],\r\n  )\r\n\r\n  const handleSelectMax = useCallback(() => {\r\n    setVal(fullBalance)\r\n  }, [fullBalance, setVal])\r\n\r\n  if (showRoiCalculator) {\r\n    return (\r\n      <RoiCalculatorModal\r\n        linkLabel={t('Get %symbol%', { symbol: lpLabel })}\r\n        stakingTokenBalance={stakedBalance.plus(max)}\r\n        stakingTokenSymbol={tokenName}\r\n        stakingTokenPrice={lpPrice.toNumber()}\r\n        earningTokenPrice={cakePrice.toNumber()}\r\n        apr={apr}\r\n        multiplier={multiplier}\r\n        displayApr={displayApr}\r\n        linkHref={addLiquidityUrl}\r\n        isFarm\r\n        initialValue={val}\r\n        onBack={() => setShowRoiCalculator(false)}\r\n      />\r\n    )\r\n  }\r\n\r\n  return (\r\n    <Modal title={isTokenOnly ? t('Stake') : t('Stake LP tokens')} onDismiss={onDismiss}>\r\n      <ModalInput\r\n        value={val}\r\n        onSelectMax={handleSelectMax}\r\n        onChange={handleChange}\r\n        max={fullBalance}\r\n        symbol={tokenName}\r\n        addLiquidityUrl={addLiquidityUrl}\r\n        inputTitle={t('Stake')}\r\n        decimals={decimals}\r\n      />\r\n      <Flex mt=\"24px\" alignItems=\"center\" justifyContent=\"space-between\">\r\n        <Text mr=\"8px\" color=\"textSubtle\">\r\n          {t('Annual ROI at current rates')}:\r\n        </Text>\r\n        <AnnualRoiContainer alignItems=\"center\" onClick={() => setShowRoiCalculator(true)}>\r\n          <AnnualRoiDisplay>${formattedAnnualRoi}</AnnualRoiDisplay>\r\n          <IconButton variant=\"text\" scale=\"sm\">\r\n            <CalculateIcon color=\"textSubtle\" width=\"18px\" />\r\n          </IconButton>\r\n        </AnnualRoiContainer>\r\n      </Flex>\r\n      <ModalActions>\r\n        <Button variant=\"secondary\" onClick={onDismiss} width=\"100%\" disabled={pendingTx}>\r\n          {t('Cancel')}\r\n        </Button>\r\n        <Button\r\n           \r\n          width=\"100%\"\r\n          disabled={\r\n            pendingTx || !lpTokensToStake.isFinite() || lpTokensToStake.eq(0) || lpTokensToStake.gt(fullBalanceNumber)\r\n          }\r\n          onClick={async () => {\r\n            setPendingTx(true)\r\n            try {\r\n              await onConfirm(val)\r\n              toastSuccess(t('Staked!'), t('Your funds have been staked in the farm'))\r\n              onDismiss()\r\n            } catch (e) {\r\n              toastError(\r\n                t('Error'),\r\n                t('Please try again. Confirm the transaction and make sure you are paying enough gas!'),\r\n              )\r\n              console.error(e)\r\n            } finally {\r\n              setPendingTx(false)\r\n            }\r\n          }}\r\n        >\r\n          {pendingTx ? t('Confirming') : t('Confirm')}\r\n        </Button>\r\n      </ModalActions>\r\n      <LinkExternal href={addLiquidityUrl} style={{ alignSelf: 'center' }}>\r\n        {t('Get %symbol%', { symbol: tokenName })}\r\n      </LinkExternal>\r\n    </Modal>\r\n  )\r\n}\r\n\r\nexport default DepositModal\r\n","import BigNumber from 'bignumber.js'\r\nimport React, { useCallback, useMemo, useState } from 'react'\r\nimport { Button, Modal } from '@pancakeswap/uikit'\r\nimport { ModalActions, ModalInput } from 'components/Modal'\r\nimport { useTranslation } from 'contexts/Localization'\r\nimport { getFullDisplayBalance } from 'utils/formatBalance'\r\nimport useToast from 'hooks/useToast'\r\n\r\ninterface WithdrawModalProps {\r\n  max: BigNumber\r\n  onConfirm: (amount: string) => void\r\n  onDismiss?: () => void\r\n  tokenName?: string\r\n  isTokenOnly?: boolean\r\n  decimals?: number\r\n}\r\n\r\nconst WithdrawModal: React.FC<WithdrawModalProps> = ({ onConfirm, onDismiss, max, tokenName = '' , isTokenOnly, decimals}) => {\r\n  const [val, setVal] = useState('')\r\n  const { toastSuccess, toastError } = useToast()\r\n  const [pendingTx, setPendingTx] = useState(false)\r\n  const { t } = useTranslation()\r\n  const fullBalance = useMemo(() => {\r\n    return getFullDisplayBalance(max, decimals)\r\n  }, [max, decimals])\r\n\r\n  const valNumber = new BigNumber(val)\r\n  const fullBalanceNumber = new BigNumber(fullBalance)\r\n\r\n  const handleChange = useCallback(\r\n    (e: React.FormEvent<HTMLInputElement>) => {\r\n      if (e.currentTarget.validity.valid) {\r\n        setVal(e.currentTarget.value.replace(/,/g, '.'))\r\n      }\r\n    },\r\n    [setVal],\r\n  )\r\n\r\n  const handleSelectMax = useCallback(() => {\r\n    setVal(fullBalance)\r\n  }, [fullBalance, setVal])\r\n\r\n  return (\r\n    <Modal title={isTokenOnly ? t('Unstake tokens') : t('Unstake LP tokens')} onDismiss={onDismiss}>\r\n      <ModalInput\r\n        onSelectMax={handleSelectMax}\r\n        onChange={handleChange}\r\n        value={val}\r\n        max={fullBalance}\r\n        symbol={tokenName}\r\n        inputTitle={t('Unstake')}\r\n      />\r\n      <ModalActions>\r\n        <Button variant=\"secondary\" onClick={onDismiss} width=\"100%\" disabled={pendingTx}>\r\n          {t('Cancel')}\r\n        </Button>\r\n        <Button\r\n           \r\n          disabled={pendingTx || !valNumber.isFinite() || valNumber.eq(0) || valNumber.gt(fullBalanceNumber)}\r\n          onClick={async () => {\r\n            setPendingTx(true)\r\n            try {\r\n              await onConfirm(val)\r\n              toastSuccess(t('Unstaked!'), t('Your earnings have also been harvested to your wallet'))\r\n              onDismiss()\r\n            } catch (e) {\r\n              toastError(\r\n                t('Error'),\r\n                t('Please try again. Confirm the transaction and make sure you are paying enough gas!'),\r\n              )\r\n              console.error(e)\r\n            } finally {\r\n              setPendingTx(false)\r\n            }\r\n          }}\r\n          width=\"100%\"\r\n        >\r\n          {pendingTx ? t('Confirming') : t('Confirm')}\r\n        </Button>\r\n      </ModalActions>\r\n    </Modal>\r\n  )\r\n}\r\n\r\nexport default WithdrawModal\r\n","import { useCallback } from 'react'\r\nimport { unstakeFarm } from 'utils/calls'\r\nimport { useMasterchef } from 'hooks/useContract'\r\n\r\nconst useUnstakeFarms = (pid: number) => {\r\n  const masterChefContract = useMasterchef()\r\n\r\n  const handleUnstake = useCallback(\r\n    async (amount: string, decimals?: number) => {\r\n      await unstakeFarm(masterChefContract, pid, amount, decimals)\r\n    },\r\n    [masterChefContract, pid],\r\n  )\r\n\r\n  return { onUnstake: handleUnstake }\r\n}\r\n\r\nexport default useUnstakeFarms\r\n","import { useCallback } from 'react'\r\nimport { stakeFarm } from 'utils/calls'\r\nimport { useMasterchef } from 'hooks/useContract'\r\n\r\nconst useStakeFarms = (pid: number) => {\r\n  const masterChefContract = useMasterchef()\r\n\r\n  const handleStake = useCallback(\r\n    async (amount: string, decimals?: number) => {\r\n      const txHash = await stakeFarm(masterChefContract, pid, amount, decimals)\r\n      console.info(txHash)\r\n    },\r\n    [masterChefContract, pid],\r\n  )\r\n\r\n  return { onStake: handleStake }\r\n}\r\n\r\nexport default useStakeFarms\r\n","import React, { useCallback } from 'react'\r\nimport { useWeb3React } from '@web3-react/core'\r\nimport styled from 'styled-components'\r\nimport BigNumber from 'bignumber.js'\r\nimport { Button, Flex, Heading, IconButton, AddIcon, MinusIcon, useModal } from '@pancakeswap/uikit'\r\nimport { useLocation } from 'react-router-dom'\r\nimport Balance from 'components/Balance'\r\nimport { useTranslation } from 'contexts/Localization'\r\nimport { useAppDispatch } from 'state'\r\nimport { fetchFarmUserDataAsync } from 'state/farms'\r\nimport { useLpTokenPrice } from 'state/farms/hooks'\r\nimport { getBalanceAmount, getBalanceNumber } from 'utils/formatBalance'\r\nimport DepositModal from '../DepositModal'\r\nimport WithdrawModal from '../WithdrawModal'\r\nimport useUnstakeFarms from '../../hooks/useUnstakeFarms'\r\nimport useStakeFarms from '../../hooks/useStakeFarms'\r\n\r\ninterface FarmCardActionsProps {\r\n  stakedBalance?: BigNumber\r\n  tokenBalance?: BigNumber\r\n  tokenName?: string\r\n  pid?: number\r\n  multiplier?: string\r\n  apr?: number\r\n  displayApr?: string\r\n  addLiquidityUrl?: string\r\n  cakePrice?: BigNumber\r\n  lpLabel?: string\r\n  isTokenOnly?: boolean\r\n  isabletoharvest?: boolean\r\n  decimals?: number\r\n}\r\n\r\nconst IconButtonWrapper = styled.div`\r\n  display: flex;\r\n  svg {\r\n    width: 20px;\r\n  }\r\n`\r\n\r\nconst StakeAction: React.FC<FarmCardActionsProps> = ({\r\n  stakedBalance,\r\n  tokenBalance,\r\n  tokenName,\r\n  pid,\r\n  multiplier,\r\n  apr,\r\n  displayApr,\r\n  addLiquidityUrl,\r\n  cakePrice,\r\n  lpLabel,\r\n  isTokenOnly,\r\n  decimals,\r\n}) => {\r\n  const { t } = useTranslation()\r\n  const { onStake } = useStakeFarms(pid)\r\n  const { onUnstake } = useUnstakeFarms(pid)\r\n  const location = useLocation()\r\n  const dispatch = useAppDispatch()\r\n  const { account } = useWeb3React()\r\n  const lpPrice = useLpTokenPrice(tokenName, isTokenOnly)\r\n\r\n  const handleStake = async (amount: string) => {\r\n    await onStake(amount, decimals)\r\n    dispatch(fetchFarmUserDataAsync({ account, pids: [pid] }))\r\n  }\r\n\r\n  const handleUnstake = async (amount: string) => {\r\n    await onUnstake(amount, decimals)\r\n    dispatch(fetchFarmUserDataAsync({ account, pids: [pid] }))\r\n  }\r\n\r\n  const displayBalance = useCallback(() => {\r\n    const stakedBalanceBigNumber = getBalanceAmount(stakedBalance, decimals)\r\n    if (stakedBalanceBigNumber.gt(0) && stakedBalanceBigNumber.lt(0.0000001)) {\r\n      return '<0.0000001'\r\n    }\r\n    if (stakedBalanceBigNumber.gt(0)) {\r\n      return stakedBalanceBigNumber.toFixed(8, BigNumber.ROUND_DOWN)\r\n    }\r\n    return stakedBalanceBigNumber.toFixed(3, BigNumber.ROUND_DOWN)\r\n  }, [stakedBalance, decimals])\r\n\r\n  const [onPresentDeposit] = useModal(\r\n    <DepositModal\r\n      max={tokenBalance}\r\n      stakedBalance={stakedBalance}\r\n      onConfirm={handleStake}\r\n      tokenName={tokenName}\r\n      multiplier={multiplier}\r\n      lpPrice={lpPrice}\r\n      lpLabel={lpLabel}\r\n      apr={apr}\r\n      displayApr={displayApr}\r\n      addLiquidityUrl={addLiquidityUrl}\r\n      cakePrice={cakePrice}\r\n      isTokenOnly={isTokenOnly}\r\n      decimals={decimals}\r\n    />,\r\n  )\r\n  const [onPresentWithdraw] = useModal(\r\n    <WithdrawModal max={stakedBalance} onConfirm={handleUnstake} tokenName={tokenName} isTokenOnly={isTokenOnly} decimals={decimals}/>,\r\n  )\r\n\r\n  const renderStakingButtons = () => {\r\n    return stakedBalance.eq(0) ? (\r\n      <Button\r\n        onClick={onPresentDeposit}\r\n        disabled={['history', 'archived'].some((item) => location.pathname.includes(item))}  \r\n      >\r\n        {isTokenOnly ? t('Stake') : t('Stake LP')}\r\n      </Button>\r\n    ) : (\r\n      <IconButtonWrapper>\r\n        <IconButton variant=\"tertiary\" onClick={onPresentWithdraw} mr=\"6px\">\r\n          <MinusIcon color=\"primary\" width=\"14px\" />\r\n        </IconButton>\r\n        <IconButton\r\n          variant=\"tertiary\"\r\n          onClick={onPresentDeposit}\r\n          disabled={['history', 'archived'].some((item) => location.pathname.includes(item))}\r\n        >\r\n          <AddIcon color=\"primary\" width=\"14px\" />\r\n        </IconButton>\r\n      </IconButtonWrapper>\r\n    )\r\n  }\r\n\r\n  return (\r\n    <Flex justifyContent=\"space-between\" alignItems=\"center\">\r\n      <Flex flexDirection=\"column\" alignItems=\"flex-start\">\r\n        <Heading color={stakedBalance.eq(0) ? 'textDisabled' : 'text'}>{displayBalance()}</Heading>\r\n        {stakedBalance.gt(0) && lpPrice.gt(0) && (\r\n          <Balance\r\n            fontSize=\"12px\"\r\n            color=\"textSubtle\"\r\n            decimals={2}\r\n            value={getBalanceNumber(lpPrice.times(stakedBalance), decimals)}\r\n            unit=\" USD\"\r\n            prefix=\"~\"\r\n          />\r\n        )}\r\n      </Flex>\r\n      {renderStakingButtons()}\r\n    </Flex>\r\n  )\r\n}\r\n\r\nexport default StakeAction\r\n","import { useCallback } from 'react'\r\nimport { harvestFarm } from 'utils/calls'\r\nimport { useMasterchef } from 'hooks/useContract'\r\n\r\nconst useHarvestFarm = (farmPid: number) => {\r\n  const masterChefContract = useMasterchef()\r\n\r\n  const handleHarvest = useCallback(async () => {\r\n    await harvestFarm(masterChefContract, farmPid)\r\n  }, [farmPid, masterChefContract])\r\n\r\n  return { onReward: handleHarvest }\r\n}\r\n\r\nexport default useHarvestFarm\r\n","import React, { useState } from 'react'\r\nimport BigNumber from 'bignumber.js'\r\nimport { Button, Flex, Heading } from '@pancakeswap/uikit'\r\nimport { useTranslation } from 'contexts/Localization'\r\nimport { useAppDispatch } from 'state'\r\nimport { fetchFarmUserDataAsync } from 'state/farms'\r\nimport useToast from 'hooks/useToast'\r\nimport { getBalanceAmount } from 'utils/formatBalance'\r\nimport { BIG_ZERO } from 'utils/bigNumber'\r\nimport { useWeb3React } from '@web3-react/core'\r\nimport { usePriceCakeBusd } from 'state/farms/hooks'\r\nimport Balance from 'components/Balance'\r\nimport useHarvestFarm from '../../hooks/useHarvestFarm'\r\n\r\ninterface FarmCardActionsProps {\r\n  earnings?: BigNumber\r\n  pid?: number\r\n  isabletoharvest?: boolean\r\n}\r\n\r\nconst HarvestAction: React.FC<FarmCardActionsProps> = ({ earnings, pid, isabletoharvest}) => {\r\n  const canharvest = true\r\n  const { account } = useWeb3React()\r\n  const { toastSuccess, toastError } = useToast()\r\n  const { t } = useTranslation()\r\n  const [pendingTx, setPendingTx] = useState(false)\r\n  const { onReward } = useHarvestFarm(pid)\r\n  const cakePrice = usePriceCakeBusd()\r\n  const dispatch = useAppDispatch()\r\n  const rawEarningsBalance = account ? getBalanceAmount(earnings) : BIG_ZERO\r\n  const displayBalance = rawEarningsBalance.toFixed(3, BigNumber.ROUND_DOWN)\r\n  const earningsBusd = rawEarningsBalance ? rawEarningsBalance.multipliedBy(cakePrice).toNumber() : 0\r\n\r\n  return (\r\n    <Flex mb=\"8px\" justifyContent=\"space-between\" alignItems=\"center\">\r\n      <Flex flexDirection=\"column\" alignItems=\"flex-start\">\r\n        <Heading color={rawEarningsBalance.eq(0) ? 'textDisabled' : 'text'}>{displayBalance}</Heading>\r\n        {earningsBusd > 0 && (\r\n          <Balance fontSize=\"12px\" color=\"textSubtle\" decimals={2} value={earningsBusd} unit=\" USD\" prefix=\"~\" />\r\n        )}\r\n      </Flex>\r\n      <Button\r\n         \r\n        disabled={rawEarningsBalance.eq(0) || pendingTx}\r\n        onClick={async () => {\r\n          if(!canharvest) {\r\n            toastError(\r\n              t('Error'),\r\n              t('Frequency Harvest. , Cannot Harvest until Lockup ends!'),\r\n            )\r\n            console.error('Frequency Harvest')\r\n          } else {\r\n            setPendingTx(true)\r\n            try {\r\n              await onReward()\r\n              toastSuccess(\r\n                `${t('Harvested')}!`,\r\n                t('Your %symbol% earnings have been sent to your wallet!', { symbol: 'LOKI' }),\r\n              )\r\n            } catch (e) {\r\n              toastError(\r\n                t('Error'),\r\n                t('Please try again. Confirm the transaction and make sure you are paying enough gas!'),\r\n              )\r\n              console.error(e)\r\n            } finally {\r\n              setPendingTx(false)\r\n            }\r\n            dispatch(fetchFarmUserDataAsync({ account, pids: [pid] }))\r\n          }\r\n        }}\r\n      >\r\n        {t('Harvest')}\r\n      </Button>\r\n    </Flex>\r\n  )\r\n}\r\n\r\nexport default HarvestAction\r\n","import { useCallback } from 'react'\r\nimport { ethers, Contract } from 'ethers'\r\nimport { useMasterchef } from 'hooks/useContract'\r\nimport { useCallWithGasPrice } from 'hooks/useCallWithGasPrice'\r\n\r\nconst useApproveFarm = (lpContract: Contract) => {\r\n  const masterChefContract = useMasterchef()\r\n  const { callWithGasPrice } = useCallWithGasPrice()\r\n  const handleApprove = useCallback(async () => {\r\n    try {\r\n      const tx = await callWithGasPrice(lpContract, 'approve', [\r\n        masterChefContract.address,\r\n        ethers.constants.MaxUint256,\r\n      ])\r\n      const receipt = await tx.wait()\r\n      return receipt.status\r\n    } catch (e) {\r\n      return false\r\n    }\r\n  }, [lpContract, masterChefContract, callWithGasPrice])\r\n\r\n  return { onApprove: handleApprove }\r\n}\r\n\r\nexport default useApproveFarm\r\n","import React, { useState, useCallback } from 'react'\r\nimport styled from 'styled-components'\r\nimport BigNumber from 'bignumber.js'\r\nimport { Button, Flex, Text } from '@pancakeswap/uikit'\r\nimport { getAddress } from 'utils/addressHelpers'\r\nimport { useAppDispatch } from 'state'\r\nimport { fetchFarmUserDataAsync } from 'state/farms'\r\nimport { Farm } from 'state/types'\r\nimport { useTranslation } from 'contexts/Localization'\r\nimport { useERC20 } from 'hooks/useContract'\r\nimport ConnectWalletButton from 'components/ConnectWalletButton'\r\nimport StakeAction from './StakeAction'\r\nimport HarvestAction from './HarvestAction'\r\nimport useApproveFarm from '../../hooks/useApproveFarm'\r\n\r\nconst Action = styled.div`\r\n  padding-top: 16px;\r\n`\r\nexport interface FarmWithStakedValue extends Farm {\r\n  apr?: number\r\n}\r\n\r\ninterface FarmCardActionsProps {\r\n  farm: FarmWithStakedValue\r\n  account?: string\r\n  addLiquidityUrl?: string\r\n  cakePrice?: BigNumber\r\n  lpLabel?: string\r\n}\r\n\r\nconst CardActions: React.FC<FarmCardActionsProps> = ({ farm, account, addLiquidityUrl, cakePrice, lpLabel }) => {\r\n  const { t } = useTranslation()\r\n  const [requestedApproval, setRequestedApproval] = useState(false)\r\n  const { pid, lpAddresses, isTokenOnly, token } = farm\r\n  const {\r\n    allowance: allowanceAsString = 0,\r\n    tokenBalance: tokenBalanceAsString = 0,\r\n    stakedBalance: stakedBalanceAsString = 0,\r\n    earnings: earningsAsString = 0,\r\n    isabletoharvest,\r\n  } = farm.userData || {}\r\n  const allowance = new BigNumber(allowanceAsString)\r\n  const tokenBalance = new BigNumber(tokenBalanceAsString)\r\n  const stakedBalance = new BigNumber(stakedBalanceAsString)\r\n  const earnings = new BigNumber(earningsAsString)\r\n  const lpAddress = isTokenOnly ? getAddress(token.address) : getAddress(lpAddresses)\r\n  const isApproved = account && allowance && allowance.isGreaterThan(0)\r\n  const dispatch = useAppDispatch()\r\n\r\n  const lpContract = useERC20(lpAddress)\r\n\r\n  const { onApprove } = useApproveFarm(lpContract)\r\n\r\n  const handleApprove = useCallback(async () => {\r\n    try {\r\n      setRequestedApproval(true)\r\n      await onApprove()\r\n      dispatch(fetchFarmUserDataAsync({ account, pids: [pid] }))\r\n      setRequestedApproval(false)\r\n    } catch (e) {\r\n      console.error(e)\r\n    }\r\n  }, [onApprove, dispatch, account, pid])\r\n\r\n  const renderApprovalOrStakeButton = () => {\r\n    return isApproved ? (\r\n      <StakeAction\r\n        stakedBalance={stakedBalance}\r\n        tokenBalance={tokenBalance}\r\n        tokenName={farm.lpSymbol}\r\n        pid={pid}\r\n        apr={farm.apr}\r\n        lpLabel={lpLabel}\r\n        cakePrice={cakePrice}\r\n        addLiquidityUrl={addLiquidityUrl}\r\n        isTokenOnly={farm.isTokenOnly}\r\n        decimals={farm.isTokenOnly ? token.decimals : 18}\r\n      />\r\n    ) : (\r\n      <Button mt=\"8px\" width=\"100%\" disabled={requestedApproval} onClick={handleApprove}>\r\n        {t('Enable Contract')}\r\n      </Button>\r\n    )\r\n  }\r\n\r\n  return (\r\n    <Action>\r\n      <Flex>\r\n        <Text bold textTransform=\"uppercase\" color=\"secondary\" fontSize=\"12px\" pr=\"4px\">\r\n          LOKI\r\n        </Text>\r\n        <Text bold textTransform=\"uppercase\" color=\"textSubtle\" fontSize=\"12px\">\r\n          {t('Earned')}\r\n        </Text>\r\n      </Flex>\r\n      <HarvestAction earnings={earnings} pid={pid} isabletoharvest={isabletoharvest}/>\r\n      <Flex>\r\n        <Text bold textTransform=\"uppercase\" color=\"secondary\" fontSize=\"12px\" pr=\"4px\">\r\n          {farm.lpSymbol}\r\n        </Text>\r\n        <Text bold textTransform=\"uppercase\" color=\"textSubtle\" fontSize=\"12px\">\r\n          {t('Staked')}\r\n        </Text>\r\n      </Flex>\r\n      {!account ? <ConnectWalletButton mt=\"8px\" width=\"100%\" /> : renderApprovalOrStakeButton()}\r\n    </Action>\r\n  )\r\n}\r\n\r\nexport default CardActions","import React from 'react'\r\nimport styled from 'styled-components'\r\nimport BigNumber from 'bignumber.js'\r\nimport { Flex, IconButton, useModal, CalculateIcon } from '@pancakeswap/uikit'\r\nimport RoiCalculatorModal from 'components/RoiCalculatorModal'\r\nimport { useTranslation } from 'contexts/Localization'\r\nimport { useFarmUser, useLpTokenPrice } from 'state/farms/hooks'\r\n\r\nconst ApyLabelContainer = styled(Flex)`\r\n  cursor: pointer;\r\n\r\n  &:hover {\r\n    opacity: 0.5;\r\n  }\r\n`\r\n\r\nexport interface ApyButtonProps {\r\n  variant: 'text' | 'text-and-button'\r\n  pid: number\r\n  lpSymbol: string\r\n  lpLabel?: string\r\n  multiplier: string\r\n  cakePrice?: BigNumber\r\n  apr?: number\r\n  displayApr?: string\r\n  addLiquidityUrl?: string\r\n  isTokenOnly?: boolean\r\n}\r\n\r\nconst ApyButton: React.FC<ApyButtonProps> = ({\r\n  variant,\r\n  pid,\r\n  lpLabel,\r\n  lpSymbol,\r\n  cakePrice,\r\n  apr,\r\n  multiplier,\r\n  displayApr,\r\n  addLiquidityUrl,\r\n  isTokenOnly,\r\n}) => {\r\n  const { t } = useTranslation()\r\n  const lpPrice = useLpTokenPrice(lpSymbol, isTokenOnly)\r\n  const { tokenBalance, stakedBalance } = useFarmUser(pid)\r\n  const [onPresentApyModal] = useModal(\r\n    <RoiCalculatorModal\r\n      linkLabel={t('Get %symbol%', { symbol: lpLabel })}\r\n      stakingTokenBalance={stakedBalance.plus(tokenBalance)}\r\n      stakingTokenSymbol={lpSymbol}\r\n      stakingTokenPrice={lpPrice.toNumber()}\r\n      earningTokenPrice={cakePrice.toNumber()}\r\n      apr={apr}\r\n      multiplier={multiplier}\r\n      displayApr={displayApr}\r\n      linkHref={addLiquidityUrl}\r\n      isFarm\r\n    />,\r\n  )\r\n\r\n  const handleClickButton = (event): void => {\r\n    event.stopPropagation()\r\n    onPresentApyModal()\r\n  }\r\n\r\n  return (\r\n    <ApyLabelContainer alignItems=\"center\" onClick={handleClickButton}>\r\n      {displayApr}%\r\n      {variant === 'text-and-button' && (\r\n        <IconButton variant=\"text\" scale=\"sm\" ml=\"4px\">\r\n          <CalculateIcon width=\"18px\" />\r\n        </IconButton>\r\n      )}\r\n    </ApyLabelContainer>\r\n  )\r\n}\r\n\r\nexport default ApyButton\r\n","import React, { useState } from 'react'\r\nimport BigNumber from 'bignumber.js'\r\nimport styled from 'styled-components'\r\nimport { Card, Flex, Text, Skeleton } from '@pancakeswap/uikit'\r\nimport { Farm } from 'state/types'\r\nimport { getBscScanLink } from 'utils'\r\nimport { useTranslation } from 'contexts/Localization'\r\nimport ExpandableSectionButton from 'components/ExpandableSectionButton'\r\nimport { BASE_ADD_LIQUIDITY_URL, BASE_URL } from 'config'\r\nimport { getAddress } from 'utils/addressHelpers'\r\nimport getLiquidityUrlPathParts from 'utils/getLiquidityUrlPathParts'\r\nimport DetailsSection from './DetailsSection'\r\nimport CardHeading from './CardHeading'\r\nimport CardActionsContainer from './CardActionsContainer'\r\nimport ApyButton from './ApyButton'\r\n\r\nexport interface FarmWithStakedValue extends Farm {\r\n  apr?: number\r\n  lpRewardsApr?: number\r\n  liquidity?: BigNumber\r\n}\r\n\r\nconst StyledCard = styled(Card)`\r\n  align-self: baseline;\r\n  > div {\r\n    background: #221779;\r\n  }\r\n`\r\n\r\nconst FarmCardInnerContainer = styled(Flex)`\r\n  flex-direction: column;\r\n  justify-content: space-around;\r\n  padding: 24px;\r\n`\r\n\r\nconst ExpandingWrapper = styled.div`\r\n  padding: 24px;\r\n  border-top: 2px solid ${({ theme }) => theme.colors.cardBorder};\r\n  overflow: hidden;\r\n`\r\n\r\ninterface FarmCardProps {\r\n  farm: FarmWithStakedValue\r\n  displayApr: string\r\n  removed: boolean\r\n  cakePrice?: BigNumber\r\n  account?: string\r\n}\r\n\r\nconst FarmCard: React.FC<FarmCardProps> = ({ farm, displayApr, removed, cakePrice, account }) => {\r\n  const { t } = useTranslation()\r\n  const [showExpandableSection, setShowExpandableSection] = useState(false)\r\n\r\n  const totalValueFormatted =\r\n    farm.liquidity && farm.liquidity.gt(0)\r\n      ? `$${farm.liquidity.toNumber().toLocaleString(undefined, { maximumFractionDigits: 0 })}`\r\n      : ''\r\n\r\n  const lpLabel = farm.lpSymbol && farm.lpSymbol.toUpperCase().replace('PANCAKE', '')\r\n  const earnLabel = farm.dual ? farm.dual.earnLabel : t('LOKI')\r\n\r\n  const liquidityUrlPathParts = getLiquidityUrlPathParts({\r\n    quoteTokenAddress: farm.quoteToken.address,\r\n    tokenAddress: farm.token.address,\r\n  })\r\n  const addLiquidityUrl = farm.isTokenOnly ? `${BASE_URL}/swap?outputCurrency=${getAddress(farm.token.address)}` : `${BASE_ADD_LIQUIDITY_URL}/${liquidityUrlPathParts}`\r\n  const lpAddress = farm.isTokenOnly ? getAddress(farm.token.address) : getAddress(farm.lpAddresses)\r\n  const isPromotedFarm = farm.token.symbol === 'LOKI'\r\n\r\n  return (\r\n    <StyledCard isActive={isPromotedFarm}>\r\n      <FarmCardInnerContainer>\r\n        <CardHeading\r\n          lpLabel={lpLabel}\r\n          multiplier={farm.multiplier}\r\n          isCommunityFarm={farm.isCommunity}\r\n          token={farm.token}\r\n          quoteToken={farm.quoteToken}\r\n          isTokenOnly={farm.isTokenOnly}\r\n          depositfee={farm.depositfee}\r\n        />\r\n        {!removed && (\r\n          <Flex justifyContent=\"space-between\" alignItems=\"center\">\r\n            <Text>{t('APR')}:</Text>\r\n            <Text bold style={{ display: 'flex', alignItems: 'center' }}>\r\n              {farm.apr ? (\r\n                <ApyButton\r\n                  variant=\"text-and-button\"\r\n                  pid={farm.pid}\r\n                  lpSymbol={farm.isTokenOnly ? farm.token.symbol : farm.lpSymbol}\r\n                  multiplier={farm.multiplier}\r\n                  lpLabel={lpLabel}\r\n                  addLiquidityUrl={addLiquidityUrl}\r\n                  cakePrice={cakePrice}\r\n                  apr={farm.apr}\r\n                  displayApr={displayApr}\r\n                  isTokenOnly={farm.isTokenOnly}\r\n                />\r\n              ) : (\r\n                <Skeleton height={24} width={80} />\r\n              )}\r\n            </Text>\r\n          </Flex>\r\n        )}\r\n        <Flex justifyContent=\"space-between\">\r\n          <Text>{t('Earn')}:</Text>\r\n          <Text bold>{earnLabel}</Text>\r\n        </Flex>\r\n        <Flex justifyContent=\"space-between\">\r\n          <Text>{t('Deposit Fee')}:</Text>\r\n          {farm.depositfee ? (\r\n              <Text bold>{farm.depositfee}</Text>\r\n            ) : (\r\n              <Skeleton height={24} width={80} />\r\n          )}\r\n        </Flex>\r\n        <CardActionsContainer\r\n          farm={farm}\r\n          lpLabel={lpLabel}\r\n          account={account}\r\n          cakePrice={cakePrice}\r\n          addLiquidityUrl={addLiquidityUrl}\r\n        />\r\n      </FarmCardInnerContainer>\r\n\r\n      <ExpandingWrapper>\r\n        <ExpandableSectionButton\r\n          onClick={() => setShowExpandableSection(!showExpandableSection)}\r\n          expanded={showExpandableSection}\r\n        />\r\n        {showExpandableSection && (\r\n          <DetailsSection\r\n            removed={removed}\r\n            bscScanAddress={getBscScanLink(lpAddress, 'address')}\r\n            infoAddress={ farm.isTokenOnly ? `https://pancakeswap.info/tokens/${lpAddress}` : `https://pancakeswap.info/pool/${lpAddress}`}\r\n            totalValueFormatted={totalValueFormatted}\r\n            lpLabel={lpLabel}\r\n            addLiquidityUrl={addLiquidityUrl}\r\n            isTokenOnly={farm.isTokenOnly}\r\n          />\r\n        )}\r\n      </ExpandingWrapper>\r\n    </StyledCard>\r\n  )\r\n}\r\n\r\nexport default FarmCard\r\n","import { useState, useEffect } from 'react'\r\n\r\n/**\r\n * Use this hook when you want to animate something when it appears on the screen (e.g. when some prop set to true)\r\n * but when its not on the screen you want it to be fully unmounted and not just hidden or height 0.\r\n * This is especially useful when you have a table of 100s rows and each row has expandable element that appears on click.\r\n * If you just set the expanding animation while keeping inactive elements mounted all those 100 elements will load the DOM,\r\n * and if they all receive updates via props you're looking at 100 DOM updates for hidden elements.\r\n * This hook \"shows\" element immediately when the isMounted is true\r\n * but keeps element mounted for delayTime to let unmounting animation happen, after which you unmount element completely.\r\n * delayTime should be the same as animation time in most cases.\r\n */\r\nconst useDelayedUnmount = (isMounted: boolean, delayTime: number) => {\r\n  const [shouldRender, setShouldRender] = useState(false)\r\n\r\n  useEffect(() => {\r\n    let timeoutId: ReturnType<typeof setTimeout>\r\n    if (isMounted && !shouldRender) {\r\n      setShouldRender(true)\r\n    } else if (!isMounted && shouldRender) {\r\n      timeoutId = setTimeout(() => setShouldRender(false), delayTime)\r\n    }\r\n    return () => clearTimeout(timeoutId)\r\n  }, [isMounted, delayTime, shouldRender])\r\n  return shouldRender\r\n}\r\n\r\nexport default useDelayedUnmount\r\n","import React from 'react'\r\nimport styled from 'styled-components'\r\nimport ApyButton from 'views/Farms/components/FarmCard/ApyButton'\r\nimport { Address } from 'config/constants/types'\r\nimport BigNumber from 'bignumber.js'\r\nimport { BASE_ADD_LIQUIDITY_URL } from 'config'\r\nimport getLiquidityUrlPathParts from 'utils/getLiquidityUrlPathParts'\r\nimport { Skeleton } from '@pancakeswap/uikit'\r\n\r\nexport interface AprProps {\r\n  value: string\r\n  multiplier: string\r\n  pid: number\r\n  lpLabel: string\r\n  lpSymbol: string\r\n  tokenAddress?: Address\r\n  quoteTokenAddress?: Address\r\n  cakePrice: BigNumber\r\n  originalValue: number\r\n  isTokenOnly?: boolean\r\n  hideButton?: boolean\r\n}\r\n\r\nconst Container = styled.div`\r\n  display: flex;\r\n  align-items: center;\r\n  color: ${({ theme }) => theme.colors.text};\r\n\r\n  button {\r\n    width: 20px;\r\n    height: 20px;\r\n\r\n    svg {\r\n      path {\r\n        fill: ${({ theme }) => theme.colors.textSubtle};\r\n      }\r\n    }\r\n  }\r\n`\r\n\r\nconst AprWrapper = styled.div`\r\n  min-width: 60px;\r\n  text-align: left;\r\n`\r\n\r\nconst Apr: React.FC<AprProps> = ({\r\n  value,\r\n  pid,\r\n  lpLabel,\r\n  lpSymbol,\r\n  multiplier,\r\n  tokenAddress,\r\n  quoteTokenAddress,\r\n  cakePrice,\r\n  originalValue,\r\n  isTokenOnly,\r\n  hideButton = false,\r\n}) => {\r\n  const liquidityUrlPathParts = getLiquidityUrlPathParts({ quoteTokenAddress, tokenAddress })\r\n  const addLiquidityUrl = `${BASE_ADD_LIQUIDITY_URL}/${liquidityUrlPathParts}`\r\n  return originalValue !== 0 ? (\r\n    <Container>\r\n      {originalValue ? (\r\n        <ApyButton\r\n          variant={hideButton ? 'text' : 'text-and-button'}\r\n          pid={pid}\r\n          lpSymbol={lpSymbol}\r\n          lpLabel={lpLabel}\r\n          multiplier={multiplier}\r\n          cakePrice={cakePrice}\r\n          apr={originalValue}\r\n          displayApr={value}\r\n          addLiquidityUrl={addLiquidityUrl}\r\n          isTokenOnly={isTokenOnly}\r\n        />\r\n      ) : (\r\n        <AprWrapper>\r\n          <Skeleton width={60} />\r\n        </AprWrapper>\r\n      )}\r\n    </Container>\r\n  ) : (\r\n    <Container>\r\n      <AprWrapper>{originalValue}%</AprWrapper>\r\n    </Container>\r\n  )\r\n}\r\n\r\nexport default Apr\r\n","import React from 'react'\r\nimport styled from 'styled-components'\r\nimport { useFarmUser } from 'state/farms/hooks'\r\nimport { useTranslation } from 'contexts/Localization'\r\nimport { Text } from '@pancakeswap/uikit'\r\nimport { getBalanceNumber } from 'utils/formatBalance'\r\nimport { Token } from 'config/constants/types'\r\nimport { TokenPairImage, TokenImage } from 'components/TokenImage'\r\n\r\nexport interface FarmProps {\r\n  label: string\r\n  pid: number\r\n  token: Token\r\n  quoteToken: Token\r\n  isTokenOnly?: boolean\r\n}\r\n\r\nconst Container = styled.div`\r\n  padding-left: 16px;\r\n  display: flex;\r\n  align-items: center;\r\n\r\n  ${({ theme }) => theme.mediaQueries.sm} {\r\n    padding-left: 32px;\r\n  }\r\n`\r\n\r\nconst TokenWrapper = styled.div`\r\n  padding-right: 8px;\r\n  width: 24px;\r\n\r\n  ${({ theme }) => theme.mediaQueries.sm} {\r\n    width: 40px;\r\n  }\r\n`\r\n\r\nconst Farm: React.FunctionComponent<FarmProps> = ({ token, quoteToken, label, pid, isTokenOnly }) => {\r\n  const { stakedBalance } = useFarmUser(pid)\r\n  const { t } = useTranslation()\r\n  const rawStakedBalance = getBalanceNumber(stakedBalance)\r\n\r\n  const handleRenderFarming = (): JSX.Element => {\r\n    if (rawStakedBalance) {\r\n      return (\r\n        <Text color=\"secondary\" fontSize=\"12px\" bold textTransform=\"uppercase\">\r\n          {t('Farming')}\r\n        </Text>\r\n      )\r\n    }\r\n\r\n    return null\r\n  }\r\n\r\n  return (\r\n    <Container>\r\n      <TokenWrapper>\r\n        {\r\n          isTokenOnly ? \r\n          <TokenImage token={token} width={64} height={64} /> : \r\n          <TokenPairImage variant=\"inverted\" primaryToken={token} secondaryToken={quoteToken} width={64} height={64} />\r\n        } \r\n      </TokenWrapper>\r\n      <div>\r\n        {handleRenderFarming()}\r\n        <Text bold>{label}</Text>\r\n      </div>\r\n    </Container>\r\n  )\r\n}\r\n\r\nexport default Farm\r\n","import React from 'react'\r\nimport styled from 'styled-components'\r\nimport { Skeleton } from '@pancakeswap/uikit'\r\n\r\nexport interface EarnedProps {\r\n  earnings: number\r\n  pid: number\r\n}\r\n\r\ninterface EarnedPropsWithLoading extends EarnedProps {\r\n  userDataReady: boolean\r\n}\r\n\r\nconst Amount = styled.span<{ earned: number }>`\r\n  color: ${({ earned, theme }) => (earned ? theme.colors.text : theme.colors.textDisabled)};\r\n  display: flex;\r\n  align-items: center;\r\n`\r\n\r\nconst Earned: React.FunctionComponent<EarnedPropsWithLoading> = ({ earnings, userDataReady }) => {\r\n  if (userDataReady) {\r\n    return <Amount earned={earnings}>{earnings.toLocaleString()}</Amount>\r\n  }\r\n  return (\r\n    <Amount earned={0}>\r\n      <Skeleton width={60} />\r\n    </Amount>\r\n  )\r\n}\r\n\r\nexport default Earned\r\n","import React from 'react'\r\nimport styled from 'styled-components'\r\nimport { ChevronDownIcon, useMatchBreakpoints } from '@pancakeswap/uikit'\r\nimport { useTranslation } from 'contexts/Localization'\r\n\r\ninterface DetailsProps {\r\n  actionPanelToggled: boolean\r\n}\r\n\r\nconst Container = styled.div`\r\n  display: flex;\r\n  width: 100%;\r\n  justify-content: flex-end;\r\n  padding-right: 8px;\r\n  color: ${({ theme }) => theme.colors.primary};\r\n\r\n  ${({ theme }) => theme.mediaQueries.sm} {\r\n    padding-right: 0px;\r\n  }\r\n`\r\n\r\nconst ArrowIcon = styled(ChevronDownIcon)<{ toggled: boolean }>`\r\n  transform: ${({ toggled }) => (toggled ? 'rotate(180deg)' : 'rotate(0)')};\r\n  height: 20px;\r\n`\r\n\r\nconst Details: React.FC<DetailsProps> = ({ actionPanelToggled }) => {\r\n  const { t } = useTranslation()\r\n  const { isDesktop } = useMatchBreakpoints()\r\n\r\n  return (\r\n    <Container>\r\n      {!isDesktop && t('Details')}\r\n      <ArrowIcon color=\"text\" toggled={actionPanelToggled} />\r\n    </Container>\r\n  )\r\n}\r\n\r\nexport default Details\r\n","import React from 'react'\r\nimport styled from 'styled-components'\r\nimport { Text, HelpIcon, Skeleton, useTooltip } from '@pancakeswap/uikit'\r\nimport { useTranslation } from 'contexts/Localization'\r\n\r\nconst ReferenceElement = styled.div`\r\n  display: inline-block;\r\n`\r\n\r\nexport interface MultiplierProps {\r\n  multiplier: string\r\n}\r\n\r\nconst MultiplierWrapper = styled.div`\r\n  color: ${({ theme }) => theme.colors.text};\r\n  width: 36px;\r\n  text-align: right;\r\n  margin-right: 14px;\r\n\r\n  ${({ theme }) => theme.mediaQueries.lg} {\r\n    text-align: left;\r\n    margin-right: 0;\r\n  }\r\n`\r\n\r\nconst Container = styled.div`\r\n  display: flex;\r\n  align-items: center;\r\n`\r\n\r\nconst Multiplier: React.FunctionComponent<MultiplierProps> = ({ multiplier }) => {\r\n  const displayMultiplier = multiplier ? multiplier.toLowerCase() : <Skeleton width={30} />\r\n  const { t } = useTranslation()\r\n  const tooltipContent = (\r\n    <>\r\n      <Text>\r\n        {t(\r\n          'The Multiplier represents the proportion of CAKE rewards each farm receives, as a proportion of the CAKE produced each block.',\r\n        )}\r\n      </Text>\r\n      <Text my=\"24px\">\r\n        {t('For example, if a 1x farm received 1 CAKE per block, a 40x farm would receive 40 CAKE per block.')}\r\n      </Text>\r\n      <Text>{t('This amount is already included in all APR calculations for the farm.')}</Text>\r\n    </>\r\n  )\r\n  const { targetRef, tooltip, tooltipVisible } = useTooltip(tooltipContent, {\r\n    placement: 'top-end',\r\n    tooltipOffset: [20, 10],\r\n  })\r\n\r\n  return (\r\n    <Container>\r\n      <MultiplierWrapper>{displayMultiplier}</MultiplierWrapper>\r\n      <ReferenceElement ref={targetRef}>\r\n        <HelpIcon color=\"textSubtle\" />\r\n      </ReferenceElement>\r\n      {tooltipVisible && tooltip}\r\n    </Container>\r\n  )\r\n}\r\n\r\nexport default Multiplier\r\n","import React from 'react'\r\nimport styled from 'styled-components'\r\nimport { HelpIcon, Text, Skeleton, useTooltip } from '@pancakeswap/uikit'\r\nimport { useTranslation } from 'contexts/Localization'\r\nimport BigNumber from 'bignumber.js'\r\n\r\nconst ReferenceElement = styled.div`\r\n  display: inline-block;\r\n`\r\n\r\nexport interface LiquidityProps {\r\n  liquidity: BigNumber\r\n}\r\n\r\nconst LiquidityWrapper = styled.div`\r\n  min-width: 110px;\r\n  font-weight: 600;\r\n  text-align: right;\r\n  margin-right: 14px;\r\n\r\n  ${({ theme }) => theme.mediaQueries.lg} {\r\n    text-align: left;\r\n    margin-right: 0;\r\n  }\r\n`\r\n\r\nconst Container = styled.div`\r\n  display: flex;\r\n  align-items: center;\r\n`\r\n\r\nconst Liquidity: React.FunctionComponent<LiquidityProps> = ({ liquidity }) => {\r\n  const displayLiquidity =\r\n    liquidity && liquidity.gt(0) ? (\r\n      `$${Number(liquidity).toLocaleString(undefined, { maximumFractionDigits: 0 })}`\r\n    ) : (\r\n      <Skeleton width={60} />\r\n    )\r\n  const { t } = useTranslation()\r\n  const { targetRef, tooltip, tooltipVisible } = useTooltip(\r\n    t('Total value of the funds in this farm’s liquidity pool'),\r\n    { placement: 'top-end', tooltipOffset: [20, 10] },\r\n  )\r\n\r\n  return (\r\n    <Container>\r\n      <LiquidityWrapper>\r\n        <Text>{displayLiquidity}</Text>\r\n      </LiquidityWrapper>\r\n      <ReferenceElement ref={targetRef}>\r\n        <HelpIcon color=\"textSubtle\" />\r\n      </ReferenceElement>\r\n      {tooltipVisible && tooltip}\r\n    </Container>\r\n  )\r\n}\r\n\r\nexport default Liquidity\r\n","import styled from 'styled-components'\r\n\r\nexport const ActionContainer = styled.div`\r\n  padding: 16px;\r\n  border: 2px solid ${({ theme }) => theme.colors.input};\r\n  border-radius: 16px;\r\n  flex-grow: 1;\r\n  flex-basis: 0;\r\n  margin-bottom: 16px;\r\n\r\n  ${({ theme }) => theme.mediaQueries.sm} {\r\n    margin-left: 12px;\r\n    margin-right: 12px;\r\n    margin-bottom: 0;\r\n    max-height: 100px;\r\n  }\r\n\r\n  ${({ theme }) => theme.mediaQueries.xl} {\r\n    margin-left: 48px;\r\n    margin-right: 0;\r\n    margin-bottom: 0;\r\n    max-height: 100px;\r\n  }\r\n`\r\n\r\nexport const ActionTitles = styled.div`\r\n  display: flex;\r\n`\r\n\r\nexport const ActionContent = styled.div`\r\n  display: flex;\r\n  justify-content: space-between;\r\n  align-items: center;\r\n`\r\n","import React, { useState } from 'react'\r\nimport { Button, Heading, Skeleton, Text } from '@pancakeswap/uikit'\r\nimport BigNumber from 'bignumber.js'\r\nimport { useWeb3React } from '@web3-react/core'\r\nimport { FarmWithStakedValue } from 'views/Farms/components/FarmCard/FarmCard'\r\nimport Balance from 'components/Balance'\r\nimport { BIG_ZERO } from 'utils/bigNumber'\r\nimport { getBalanceAmount } from 'utils/formatBalance'\r\nimport { useAppDispatch } from 'state'\r\nimport { fetchFarmUserDataAsync } from 'state/farms'\r\nimport { usePriceCakeBusd } from 'state/farms/hooks'\r\nimport useToast from 'hooks/useToast'\r\nimport { useTranslation } from 'contexts/Localization'\r\nimport useHarvestFarm from '../../../hooks/useHarvestFarm'\r\n\r\nimport { ActionContainer, ActionTitles, ActionContent } from './styles'\r\n\r\ninterface HarvestActionProps extends FarmWithStakedValue {\r\n  userDataReady: boolean\r\n}\r\n\r\nconst HarvestAction: React.FunctionComponent<HarvestActionProps> = ({ pid, userData, userDataReady, canharvest }) => {\r\n  const { toastSuccess, toastError } = useToast()\r\n  const earningsBigNumber = new BigNumber(userData.earnings)\r\n  const isabletoharvest = true\r\n  const cakePrice = usePriceCakeBusd()\r\n  let earnings = BIG_ZERO\r\n  let earningsBusd = 0\r\n  let displayBalance = userDataReady ? earnings.toLocaleString() : <Skeleton width={60} />\r\n  // If user didn't connect wallet default balance will be 0\r\n  if (!earningsBigNumber.isZero()) {\r\n    earnings = getBalanceAmount(earningsBigNumber)\r\n    earningsBusd = earnings.multipliedBy(cakePrice).toNumber()\r\n    displayBalance = earnings.toFixed(3, BigNumber.ROUND_DOWN)\r\n  }\r\n\r\n  const [pendingTx, setPendingTx] = useState(false)\r\n  const { onReward } = useHarvestFarm(pid)\r\n  const { t } = useTranslation()\r\n  const dispatch = useAppDispatch()\r\n  const { account } = useWeb3React()\r\n\r\n  return (\r\n    <ActionContainer>\r\n      <ActionTitles>\r\n        <Text bold textTransform=\"uppercase\" color=\"secondary\" fontSize=\"12px\" pr=\"4px\">\r\n          LOKI\r\n        </Text>\r\n        <Text bold textTransform=\"uppercase\" color=\"textSubtle\" fontSize=\"12px\">\r\n          {t('Earned')}\r\n        </Text>\r\n      </ActionTitles>\r\n      <ActionContent>\r\n        <div>\r\n          <Heading>{displayBalance}</Heading>\r\n          {earningsBusd > 0 && (\r\n            <Balance fontSize=\"12px\" color=\"textSubtle\" decimals={2} value={earningsBusd} unit=\" USD\" prefix=\"~\" />\r\n          )}\r\n        </div>\r\n        <Button\r\n           \r\n          disabled={earnings.eq(0) || pendingTx || !userDataReady}\r\n          onClick={async () => {\r\n            if(!isabletoharvest){\r\n              toastError(\r\n                t('Error'),\r\n                t('Frequency Harvest. , Cannot Harvest until Lockup ends!'),\r\n              )\r\n              console.error('Frequency Harvest')\r\n            } else {\r\n              setPendingTx(true)\r\n              try {\r\n                await onReward()\r\n                toastSuccess(\r\n                  `${t('Harvested')}!`,\r\n                  t('Your %symbol% earnings have been sent to your wallet!', { symbol: 'LOKI' }),\r\n                )\r\n              } catch (e) {\r\n                toastError(\r\n                  t('Error'),\r\n                  t('Please try again. Confirm the transaction and make sure you are paying enough gas!'),\r\n                )\r\n                console.error(e)\r\n              } finally {\r\n                setPendingTx(false)\r\n              }\r\n              dispatch(fetchFarmUserDataAsync({ account, pids: [pid] }))\r\n            }\r\n          }}\r\n          ml=\"4px\"\r\n        >\r\n          {t('Harvest')}\r\n        </Button>\r\n      </ActionContent>\r\n    </ActionContainer>\r\n  )\r\n}\r\n\r\nexport default HarvestAction\r\n","import React, { useState, useCallback } from 'react'\r\nimport styled from 'styled-components'\r\nimport { Button, useModal, IconButton, AddIcon, MinusIcon, Skeleton, Text, Heading } from '@pancakeswap/uikit'\r\nimport { useLocation } from 'react-router-dom'\r\nimport { BigNumber } from 'bignumber.js'\r\nimport ConnectWalletButton from 'components/ConnectWalletButton'\r\nimport Balance from 'components/Balance'\r\nimport { useWeb3React } from '@web3-react/core'\r\nimport { useFarmUser, useLpTokenPrice, usePriceCakeBusd } from 'state/farms/hooks'\r\nimport { fetchFarmUserDataAsync } from 'state/farms'\r\nimport { FarmWithStakedValue } from 'views/Farms/components/FarmCard/FarmCard'\r\nimport { useTranslation } from 'contexts/Localization'\r\nimport { useERC20 } from 'hooks/useContract'\r\nimport { BASE_ADD_LIQUIDITY_URL } from 'config'\r\nimport { useAppDispatch } from 'state'\r\nimport { getAddress } from 'utils/addressHelpers'\r\nimport getLiquidityUrlPathParts from 'utils/getLiquidityUrlPathParts'\r\nimport { getBalanceAmount, getBalanceNumber, getFullDisplayBalance } from 'utils/formatBalance'\r\nimport useUnstakeFarms from '../../../hooks/useUnstakeFarms'\r\nimport DepositModal from '../../DepositModal'\r\nimport WithdrawModal from '../../WithdrawModal'\r\nimport useStakeFarms from '../../../hooks/useStakeFarms'\r\nimport useApproveFarm from '../../../hooks/useApproveFarm'\r\nimport { ActionContainer, ActionTitles, ActionContent } from './styles'\r\n\r\nconst IconButtonWrapper = styled.div`\r\n  display: flex;\r\n`\r\n\r\ninterface StackedActionProps extends FarmWithStakedValue {\r\n  userDataReady: boolean\r\n  lpLabel?: string\r\n  displayApr?: string\r\n  decimals?: number\r\n}\r\n\r\nconst Staked: React.FunctionComponent<StackedActionProps> = ({\r\n  pid,\r\n  apr,\r\n  multiplier,\r\n  lpSymbol,\r\n  lpLabel,\r\n  lpAddresses,\r\n  quoteToken,\r\n  token,\r\n  userDataReady,\r\n  displayApr,\r\n  isTokenOnly,\r\n  decimals\r\n}) => {\r\n  const { t } = useTranslation()\r\n  const { account } = useWeb3React()\r\n  const [requestedApproval, setRequestedApproval] = useState(false)\r\n  const { allowance, tokenBalance, stakedBalance } = useFarmUser(pid)\r\n  const { onStake } = useStakeFarms(pid)\r\n  const { onUnstake } = useUnstakeFarms(pid)\r\n  const location = useLocation()\r\n  const lpPrice = useLpTokenPrice(lpSymbol, isTokenOnly)\r\n  const cakePrice = usePriceCakeBusd()\r\n\r\n  const isApproved = account && allowance && allowance.isGreaterThan(0)\r\n\r\n  const lpAddress = isTokenOnly ? getAddress(token.address) : getAddress(lpAddresses)\r\n  const liquidityUrlPathParts = getLiquidityUrlPathParts({\r\n    quoteTokenAddress: quoteToken.address,\r\n    tokenAddress: token.address,\r\n  })\r\n  const addLiquidityUrl = `${BASE_ADD_LIQUIDITY_URL}/${liquidityUrlPathParts}`\r\n\r\n  const handleStake = async (amount: string) => {\r\n    await onStake(amount, decimals)\r\n    dispatch(fetchFarmUserDataAsync({ account, pids: [pid] }))\r\n  }\r\n\r\n  const handleUnstake = async (amount: string) => {\r\n    await onUnstake(amount, decimals)\r\n    dispatch(fetchFarmUserDataAsync({ account, pids: [pid] }))\r\n  }\r\n\r\n  const displayBalance = useCallback(() => {\r\n    const stakedBalanceBigNumber = getBalanceAmount(stakedBalance, decimals)\r\n    if (stakedBalanceBigNumber.gt(0) && stakedBalanceBigNumber.lt(0.0000001)) {\r\n      return stakedBalanceBigNumber.toFixed(10, BigNumber.ROUND_DOWN)\r\n    }\r\n    if (stakedBalanceBigNumber.gt(0) && stakedBalanceBigNumber.lt(0.0001)) {\r\n      return getFullDisplayBalance(stakedBalance, decimals).toLocaleString()\r\n    }\r\n    return stakedBalanceBigNumber.toFixed(3, BigNumber.ROUND_DOWN)\r\n  }, [stakedBalance, decimals])\r\n\r\n  const [onPresentDeposit] = useModal(\r\n    <DepositModal\r\n      max={tokenBalance}\r\n      lpPrice={lpPrice}\r\n      lpLabel={lpLabel}\r\n      apr={apr}\r\n      displayApr={displayApr}\r\n      stakedBalance={stakedBalance}\r\n      onConfirm={handleStake}\r\n      tokenName={lpSymbol}\r\n      multiplier={multiplier}\r\n      addLiquidityUrl={addLiquidityUrl}\r\n      cakePrice={cakePrice}\r\n      isTokenOnly={isTokenOnly}\r\n      decimals={decimals}\r\n    />,\r\n  )\r\n  const [onPresentWithdraw] = useModal(\r\n    <WithdrawModal max={stakedBalance} onConfirm={handleUnstake} tokenName={lpSymbol} isTokenOnly={isTokenOnly} decimals={decimals}/>,\r\n  )\r\n  const lpContract = useERC20(lpAddress)\r\n  const dispatch = useAppDispatch()\r\n  const { onApprove } = useApproveFarm(lpContract)\r\n\r\n  const handleApprove = useCallback(async () => {\r\n    try {\r\n      setRequestedApproval(true)\r\n      await onApprove()\r\n      dispatch(fetchFarmUserDataAsync({ account, pids: [pid] }))\r\n\r\n      setRequestedApproval(false)\r\n    } catch (e) {\r\n      console.error(e)\r\n    }\r\n  }, [onApprove, dispatch, account, pid])\r\n\r\n  if (!account) {\r\n    return (\r\n      <ActionContainer>\r\n        <ActionTitles>\r\n          <Text bold textTransform=\"uppercase\" color=\"textSubtle\" fontSize=\"12px\">\r\n            {t('Start Farming')}\r\n          </Text>\r\n        </ActionTitles>\r\n        <ActionContent>\r\n          <ConnectWalletButton width=\"100%\" />\r\n        </ActionContent>\r\n      </ActionContainer>\r\n    )\r\n  }\r\n\r\n  if (isApproved) {\r\n    if (stakedBalance.gt(0)) {\r\n      return (\r\n        <ActionContainer>\r\n          <ActionTitles>\r\n            <Text bold textTransform=\"uppercase\" color=\"secondary\" fontSize=\"12px\" pr=\"4px\">\r\n              {lpSymbol}\r\n            </Text>\r\n            <Text bold textTransform=\"uppercase\" color=\"textSubtle\" fontSize=\"12px\">\r\n              {t('Staked')}\r\n            </Text>\r\n          </ActionTitles>\r\n          <ActionContent>\r\n            <div>\r\n              <Heading>{displayBalance()}</Heading>\r\n              {stakedBalance.gt(0) && lpPrice.gt(0) && (\r\n                <Balance\r\n                  fontSize=\"12px\"\r\n                  color=\"textSubtle\"\r\n                  decimals={2}\r\n                  value={getBalanceNumber(lpPrice.times(stakedBalance), decimals)}\r\n                  unit=\" USD\"\r\n                  prefix=\"~\"\r\n                />\r\n              )}\r\n            </div>\r\n            <IconButtonWrapper>\r\n              <IconButton variant=\"secondary\" onClick={onPresentWithdraw} mr=\"6px\">\r\n                <MinusIcon color=\"primary\" width=\"14px\" />\r\n              </IconButton>\r\n              <IconButton\r\n                variant=\"secondary\"\r\n                onClick={onPresentDeposit}\r\n                disabled={['history', 'archived'].some((item) => location.pathname.includes(item))}\r\n              >\r\n                <AddIcon color=\"primary\" width=\"14px\" />\r\n              </IconButton>\r\n            </IconButtonWrapper>\r\n          </ActionContent>\r\n        </ActionContainer>\r\n      )\r\n    }\r\n\r\n    return (\r\n      <ActionContainer>\r\n        <ActionTitles>\r\n          <Text bold textTransform=\"uppercase\" color=\"textSubtle\" fontSize=\"12px\" pr=\"4px\">\r\n            {t('Stake').toUpperCase()}\r\n          </Text>\r\n          <Text bold textTransform=\"uppercase\" color=\"secondary\" fontSize=\"12px\">\r\n            {lpSymbol}\r\n          </Text>\r\n        </ActionTitles>\r\n        <ActionContent>\r\n          <Button\r\n            width=\"100%\"\r\n            onClick={onPresentDeposit}\r\n            variant=\"secondary\"\r\n            disabled={['history', 'archived'].some((item) => location.pathname.includes(item))}\r\n          >\r\n            {isTokenOnly ? t('Stake') : t('Stake LP')}\r\n          </Button>\r\n        </ActionContent>\r\n      </ActionContainer>\r\n    )\r\n  }\r\n\r\n  if (!userDataReady) {\r\n    return (\r\n      <ActionContainer>\r\n        <ActionTitles>\r\n          <Text bold textTransform=\"uppercase\" color=\"textSubtle\" fontSize=\"12px\">\r\n            {t('Start Farming')}\r\n          </Text>\r\n        </ActionTitles>\r\n        <ActionContent>\r\n          <Skeleton width={180} marginBottom={28} marginTop={14} />\r\n        </ActionContent>\r\n      </ActionContainer>\r\n    )\r\n  }\r\n\r\n  return (\r\n    <ActionContainer>\r\n      <ActionTitles>\r\n        <Text bold textTransform=\"uppercase\" color=\"textSubtle\" fontSize=\"12px\">\r\n          {t('Enable Farm')}\r\n        </Text>\r\n      </ActionTitles>\r\n      <ActionContent>\r\n        <Button width=\"100%\" disabled={requestedApproval} onClick={handleApprove} variant=\"secondary\">\r\n          {t('Enable')}\r\n        </Button>\r\n      </ActionContent>\r\n    </ActionContainer>\r\n  )\r\n}\r\n\r\nexport default Staked\r\n","import React from 'react'\r\nimport styled, { keyframes, css } from 'styled-components'\r\nimport { useTranslation } from 'contexts/Localization'\r\nimport { LinkExternal, Text } from '@pancakeswap/uikit'\r\nimport { FarmWithStakedValue } from 'views/Farms/components/FarmCard/FarmCard'\r\nimport getLiquidityUrlPathParts from 'utils/getLiquidityUrlPathParts'\r\nimport { BASE_ADD_LIQUIDITY_URL, BASE_URL } from 'config'\r\nimport { getAddress } from 'utils/addressHelpers'\r\nimport { getBscScanLink } from 'utils'\r\nimport { DualTag, NofeeTag } from 'components/Tags'\r\n\r\nimport HarvestAction from './HarvestAction'\r\nimport StakedAction from './StakedAction'\r\nimport Apr, { AprProps } from '../Apr'\r\nimport Multiplier, { MultiplierProps } from '../Multiplier'\r\nimport Liquidity, { LiquidityProps } from '../Liquidity'\r\n\r\nexport interface ActionPanelProps {\r\n  apr: AprProps\r\n  multiplier: MultiplierProps\r\n  liquidity: LiquidityProps\r\n  details: FarmWithStakedValue\r\n  userDataReady: boolean\r\n  expanded: boolean\r\n}\r\n\r\nconst expandAnimation = keyframes`\r\n  from {\r\n    max-height: 0px;\r\n  }\r\n  to {\r\n    max-height: 500px;\r\n  }\r\n`\r\n\r\nconst collapseAnimation = keyframes`\r\n  from {\r\n    max-height: 500px;\r\n  }\r\n  to {\r\n    max-height: 0px;\r\n  }\r\n`\r\n\r\nconst Container = styled.div<{ expanded }>`\r\n  animation: ${({ expanded }) =>\r\n    expanded\r\n      ? css`\r\n          ${expandAnimation} 300ms linear forwards\r\n        `\r\n      : css`\r\n          ${collapseAnimation} 300ms linear forwards\r\n        `};\r\n  overflow: hidden;\r\n  background: ${({ theme }) => theme.colors.background};\r\n  display: flex;\r\n  width: 100%;\r\n  flex-direction: column-reverse;\r\n  padding: 24px;\r\n\r\n  ${({ theme }) => theme.mediaQueries.lg} {\r\n    flex-direction: row;\r\n    padding: 16px 32px;\r\n  }\r\n`\r\n\r\nconst StyledLinkExternal = styled(LinkExternal)`\r\n  font-weight: 400;\r\n`\r\n\r\nconst StakeContainer = styled.div`\r\n  color: ${({ theme }) => theme.colors.text};\r\n  align-items: center;\r\n  display: flex;\r\n  justify-content: space-between;\r\n\r\n  ${({ theme }) => theme.mediaQueries.sm} {\r\n    justify-content: flex-start;\r\n  }\r\n`\r\n\r\nconst TagsContainer = styled.div`\r\n  display: flex;\r\n  align-items: center;\r\n  margin-top: 25px;\r\n\r\n  ${({ theme }) => theme.mediaQueries.sm} {\r\n    margin-top: 16px;\r\n  }\r\n\r\n  > div {\r\n    height: 24px;\r\n    padding: 0 6px;\r\n    font-size: 14px;\r\n    margin-right: 4px;\r\n\r\n    svg {\r\n      width: 14px;\r\n    }\r\n  }\r\n`\r\n\r\nconst ActionContainer = styled.div`\r\n  display: flex;\r\n  flex-direction: column;\r\n\r\n  ${({ theme }) => theme.mediaQueries.sm} {\r\n    flex-direction: row;\r\n    align-items: center;\r\n    flex-grow: 1;\r\n    flex-basis: 0;\r\n  }\r\n`\r\n\r\nconst InfoContainer = styled.div`\r\n  min-width: 200px;\r\n`\r\n\r\nconst ValueContainer = styled.div`\r\n  display: block;\r\n\r\n  ${({ theme }) => theme.mediaQueries.lg} {\r\n    display: none;\r\n  }\r\n`\r\n\r\nconst ValueWrapper = styled.div`\r\n  display: flex;\r\n  align-items: center;\r\n  justify-content: space-between;\r\n  margin: 4px 0px;\r\n`\r\n\r\nconst ActionPanel: React.FunctionComponent<ActionPanelProps> = ({\r\n  details,\r\n  apr,\r\n  multiplier,\r\n  liquidity,\r\n  userDataReady,\r\n  expanded,\r\n}) => {\r\n  const farm = details\r\n\r\n  const { t } = useTranslation()\r\n  const isActive = farm.multiplier !== '0X'\r\n  const { quoteToken, token, dual, canharvest } = farm\r\n  const lpLabel = farm.lpSymbol && farm.lpSymbol.toUpperCase().replace('PANCAKE', '')\r\n  const liquidityUrlPathParts = getLiquidityUrlPathParts({\r\n    quoteTokenAddress: quoteToken.address,\r\n    tokenAddress: token.address,\r\n  })\r\n  const lpAddress = farm.isTokenOnly ? getAddress(token.address) : getAddress(farm.lpAddresses)\r\n  const decimals = farm.isTokenOnly ? token.decimals : 18\r\n  const bsc = getBscScanLink(lpAddress, 'address')\r\n  const info = farm.isTokenOnly ? `https://pancakeswap.info/tokens/${lpAddress}` : `https://pancakeswap.info/pool/${lpAddress}`\r\n  const addLiquidityUrl = farm.isTokenOnly ? `${BASE_URL}/swap?outputCurrency=${getAddress(farm.token.address)}` : `${BASE_ADD_LIQUIDITY_URL}/${liquidityUrlPathParts}`\r\n\r\n  return (\r\n    <Container expanded={expanded}>\r\n      <InfoContainer>\r\n        {isActive && (\r\n          <StakeContainer>\r\n            <StyledLinkExternal color=\"text\" href={addLiquidityUrl}>\r\n              {t('Get %symbol%', { symbol: lpLabel })}\r\n            </StyledLinkExternal>\r\n          </StakeContainer>\r\n        )}\r\n        <StyledLinkExternal color=\"text\" href={bsc}>{t('View Contract')}</StyledLinkExternal>\r\n        {/* <StyledLinkExternal href={info}>{farm.isTokenOnly ? t('See Token Info') : t('See Pair Info')}</StyledLinkExternal> */}\r\n        <TagsContainer>\r\n          {farm.depositfee === '0%' ? <NofeeTag /> : <Text>{t('Deposit Fee')}:{farm.depositfee}</Text>}\r\n        </TagsContainer>\r\n      </InfoContainer>\r\n      <ValueContainer>\r\n        <ValueWrapper>\r\n          <Text>{t('APR')}</Text>\r\n          <Apr {...apr} />\r\n        </ValueWrapper>\r\n        <ValueWrapper>\r\n          <Text>{t('Multiplier')}</Text>\r\n          <Multiplier {...multiplier} />\r\n        </ValueWrapper>\r\n        <ValueWrapper>\r\n          <Text>{t('Liquidity')}</Text>\r\n          <Liquidity {...liquidity} />\r\n        </ValueWrapper>\r\n      </ValueContainer>\r\n      <ActionContainer>\r\n        <HarvestAction {...farm} userDataReady={userDataReady} canharvest={canharvest}/>\r\n        <StakedAction {...farm} userDataReady={userDataReady} lpLabel={lpLabel} displayApr={apr.value} decimals={decimals}/>\r\n      </ActionContainer>\r\n    </Container>\r\n  )\r\n}\r\n\r\nexport default ActionPanel\r\n","import React from 'react'\r\nimport styled from 'styled-components'\r\n\r\nconst Label = styled.div`\r\n  font-size: 12px;\r\n  color: ${({ theme }) => theme.colors.textSubtle};\r\n  text-align: left;\r\n`\r\n\r\nconst ContentContainer = styled.div`\r\n  min-height: 24px;\r\n  display: flex;\r\n  align-items: center;\r\n`\r\n\r\ninterface CellLayoutProps {\r\n  label?: string\r\n}\r\n\r\nconst CellLayout: React.FC<CellLayoutProps> = ({ label = '', children }) => {\r\n  return (\r\n    <div>\r\n      {label && <Label>{label}</Label>}\r\n      <ContentContainer>{children}</ContentContainer>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default CellLayout\r\n","import React, { useEffect, useState } from 'react'\r\nimport styled from 'styled-components'\r\nimport { FarmWithStakedValue } from 'views/Farms/components/FarmCard/FarmCard'\r\nimport { useMatchBreakpoints } from '@pancakeswap/uikit'\r\nimport { useTranslation } from 'contexts/Localization'\r\nimport useDelayedUnmount from 'hooks/useDelayedUnmount'\r\nimport { useFarmUser } from 'state/farms/hooks'\r\n\r\nimport Apr, { AprProps } from './Apr'\r\nimport Farm, { FarmProps } from './Farm'\r\nimport Earned, { EarnedProps } from './Earned'\r\nimport Details from './Details'\r\nimport Multiplier, { MultiplierProps } from './Multiplier'\r\nimport Liquidity, { LiquidityProps } from './Liquidity'\r\nimport ActionPanel from './Actions/ActionPanel'\r\nimport CellLayout from './CellLayout'\r\nimport { DesktopColumnSchema, MobileColumnSchema } from '../types'\r\n\r\nexport interface RowProps {\r\n  apr: AprProps\r\n  farm: FarmProps\r\n  earned: EarnedProps\r\n  multiplier: MultiplierProps\r\n  liquidity: LiquidityProps\r\n  details: FarmWithStakedValue\r\n}\r\n\r\ninterface RowPropsWithLoading extends RowProps {\r\n  userDataReady: boolean\r\n}\r\n\r\nconst cells = {\r\n  apr: Apr,\r\n  farm: Farm,\r\n  earned: Earned,\r\n  details: Details,\r\n  multiplier: Multiplier,\r\n  liquidity: Liquidity,\r\n}\r\n\r\nconst CellInner = styled.div`\r\n  padding: 24px 0px;\r\n  display: flex;\r\n  width: 100%;\r\n  align-items: center;\r\n  padding-right: 8px;\r\n\r\n  ${({ theme }) => theme.mediaQueries.xl} {\r\n    padding-right: 32px;\r\n  }\r\n`\r\n\r\nconst StyledTr = styled.tr`\r\n  cursor: pointer;\r\n  border-bottom: 2px solid ${({ theme }) => theme.colors.cardBorder};\r\n`\r\n\r\nconst EarnedMobileCell = styled.td`\r\n  padding: 16px 0 24px 16px;\r\n`\r\n\r\nconst AprMobileCell = styled.td`\r\n  padding-top: 16px;\r\n  padding-bottom: 24px;\r\n`\r\n\r\nconst FarmMobileCell = styled.td`\r\n  padding-top: 24px;\r\n`\r\n\r\nconst Row: React.FunctionComponent<RowPropsWithLoading> = (props) => {\r\n  const { details, userDataReady } = props\r\n  const hasStakedAmount = !!useFarmUser(details.pid).stakedBalance.toNumber()\r\n  const [actionPanelExpanded, setActionPanelExpanded] = useState(hasStakedAmount)\r\n  const shouldRenderChild = useDelayedUnmount(actionPanelExpanded, 300)\r\n  const { t } = useTranslation()\r\n\r\n  const toggleActionPanel = () => {\r\n    setActionPanelExpanded(!actionPanelExpanded)\r\n  }\r\n\r\n  useEffect(() => {\r\n    setActionPanelExpanded(hasStakedAmount)\r\n  }, [hasStakedAmount])\r\n\r\n  const { isDesktop, isMobile } = useMatchBreakpoints()\r\n\r\n  const isSmallerScreen = !isDesktop\r\n  const tableSchema = isSmallerScreen ? MobileColumnSchema : DesktopColumnSchema\r\n  const columnNames = tableSchema.map((column) => column.name)\r\n  const handleRenderRow = () => {\r\n    if (!isMobile) {\r\n      return (\r\n        <StyledTr onClick={toggleActionPanel}>\r\n          {Object.keys(props).map((key) => {\r\n            const columnIndex = columnNames.indexOf(key)\r\n            if (columnIndex === -1) {\r\n              return null\r\n            }\r\n            switch (key) {\r\n              case 'details':\r\n                return (\r\n                  <td key={key}>\r\n                    <CellInner>\r\n                      <CellLayout>\r\n                        <Details actionPanelToggled={actionPanelExpanded} />\r\n                      </CellLayout>\r\n                    </CellInner>\r\n                  </td>\r\n                )\r\n              case 'apr':\r\n                return (\r\n                  <td key={key}>\r\n                    <CellInner>\r\n                      <CellLayout label={t('APR')}>\r\n                        <Apr {...props.apr} isTokenOnly={props.farm.isTokenOnly} hideButton={isSmallerScreen} />\r\n                      </CellLayout>\r\n                    </CellInner>\r\n                  </td>\r\n                )\r\n              default:\r\n                return (\r\n                  <td key={key}>\r\n                    <CellInner>\r\n                      <CellLayout label={t(tableSchema[columnIndex].label)}>\r\n                        {React.createElement(cells[key], { ...props[key], userDataReady })}\r\n                      </CellLayout>\r\n                    </CellInner>\r\n                  </td>\r\n                )\r\n            }\r\n          })}\r\n        </StyledTr>\r\n      )\r\n    }\r\n\r\n    return (\r\n      <StyledTr onClick={toggleActionPanel}>\r\n        <td>\r\n          <tr>\r\n            <FarmMobileCell>\r\n              <CellLayout>\r\n                <Farm {...props.farm} />\r\n              </CellLayout>\r\n            </FarmMobileCell>\r\n          </tr>\r\n          <tr>\r\n            <EarnedMobileCell>\r\n              <CellLayout label={t('Earned')}>\r\n                <Earned {...props.earned} userDataReady={userDataReady} />\r\n              </CellLayout>\r\n            </EarnedMobileCell>\r\n            <AprMobileCell>\r\n              <CellLayout label={t('APR')}>\r\n                <Apr {...props.apr} isTokenOnly={props.farm.isTokenOnly} hideButton />\r\n              </CellLayout>\r\n            </AprMobileCell>\r\n          </tr>\r\n        </td>\r\n        <td>\r\n          <CellInner>\r\n            <CellLayout>\r\n              <Details actionPanelToggled={actionPanelExpanded} />\r\n            </CellLayout>\r\n          </CellInner>\r\n        </td>\r\n      </StyledTr>\r\n    )\r\n  }\r\n\r\n  return (\r\n    <>\r\n      {handleRenderRow()}\r\n      {shouldRenderChild && (\r\n        <tr>\r\n          <td colSpan={6}>\r\n            <ActionPanel {...props} expanded={actionPanelExpanded} />\r\n          </td>\r\n        </tr>\r\n      )}\r\n    </>\r\n  )\r\n}\r\n\r\nexport default Row\r\n","import React, { useRef } from 'react'\r\nimport styled from 'styled-components'\r\nimport { useTable, Button, ChevronUpIcon, ColumnType } from '@pancakeswap/uikit'\r\nimport { useTranslation } from 'contexts/Localization'\r\n\r\nimport Row, { RowProps } from './Row'\r\n\r\nexport interface ITableProps {\r\n  data: RowProps[]\r\n  columns: ColumnType<RowProps>[]\r\n  userDataReady: boolean\r\n  sortColumn?: string\r\n}\r\n\r\nconst Container = styled.div`\r\n  filter: ${({ theme }) => theme.card.dropShadow};\r\n  width: 100%;\r\n  background: ${({ theme }) => theme.card.background};\r\n  border-radius: 16px;\r\n  margin: 16px 0px;\r\n`\r\n\r\nconst TableWrapper = styled.div`\r\n  overflow: visible;\r\n\r\n  &::-webkit-scrollbar {\r\n    display: none;\r\n  }\r\n`\r\n\r\nconst StyledTable = styled.table`\r\n  border-collapse: collapse;\r\n  font-size: 14px;\r\n  border-radius: 4px;\r\n  margin-left: auto;\r\n  margin-right: auto;\r\n  width: 100%;\r\n`\r\n\r\nconst TableBody = styled.tbody`\r\n  & tr {\r\n    td {\r\n      font-size: 16px;\r\n      vertical-align: middle;\r\n    }\r\n  }\r\n`\r\n\r\nconst TableContainer = styled.div`\r\n  position: relative;\r\n`\r\n\r\nconst ScrollButtonContainer = styled.div`\r\n  display: flex;\r\n  justify-content: center;\r\n  padding-top: 5px;\r\n  padding-bottom: 5px;\r\n`\r\n\r\nconst FarmTable: React.FC<ITableProps> = (props) => {\r\n  const tableWrapperEl = useRef<HTMLDivElement>(null)\r\n  const { t } = useTranslation()\r\n  const { data, columns, userDataReady } = props\r\n\r\n  const { rows } = useTable(columns, data, { sortable: true, sortColumn: 'farm' })\r\n\r\n  const scrollToTop = (): void => {\r\n    tableWrapperEl.current.scrollIntoView({\r\n      behavior: 'smooth',\r\n    })\r\n  }\r\n\r\n  return (\r\n    <Container>\r\n      <TableContainer>\r\n        <TableWrapper ref={tableWrapperEl}>\r\n          <StyledTable>\r\n            <TableBody>\r\n              {rows.map((row) => {\r\n                return <Row {...row.original} userDataReady={userDataReady} key={`table-row-${row.id}`} />\r\n              })}\r\n            </TableBody>\r\n          </StyledTable>\r\n        </TableWrapper>\r\n        <ScrollButtonContainer>\r\n          <Button variant=\"text\" style={{color:'#FFF'}}onClick={scrollToTop}>\r\n            {t('To Top')}\r\n            <ChevronUpIcon color=\"text\" />\r\n          </Button>\r\n        </ScrollButtonContainer>\r\n      </TableContainer>\r\n    </Container>\r\n  )\r\n}\r\n\r\nexport default FarmTable\r\n","import React from 'react'\r\nimport styled from 'styled-components'\r\nimport { useLocation, Link, useRouteMatch } from 'react-router-dom'\r\nimport { ButtonMenu, ButtonMenuItem, NotificationDot } from '@pancakeswap/uikit'\r\nimport { useTranslation } from 'contexts/Localization'\r\n\r\ninterface FarmTabButtonsProps {\r\n  hasStakeInFinishedFarms: boolean\r\n}\r\n\r\nconst FarmTabButtons: React.FC<FarmTabButtonsProps> = ({ hasStakeInFinishedFarms }) => {\r\n  const { url } = useRouteMatch()\r\n  const location = useLocation()\r\n  const { t } = useTranslation()\r\n\r\n  let activeIndex\r\n  switch (location.pathname) {\r\n    case '/farms':\r\n      activeIndex = 0\r\n      break\r\n    case '/farms/history':\r\n      activeIndex = 1\r\n      break\r\n    case '/farms/archived':\r\n      activeIndex = 2\r\n      break\r\n    default:\r\n      activeIndex = 0\r\n      break\r\n  }\r\n\r\n  return (\r\n    <Wrapper>\r\n      <ButtonMenu activeIndex={activeIndex} scale=\"sm\" variant=\"subtle\">\r\n        <ButtonMenuItem as={Link} to={`${url}`}>\r\n          {t('Live')}\r\n        </ButtonMenuItem>\r\n        <NotificationDot show={hasStakeInFinishedFarms}>\r\n          <ButtonMenuItem as={Link} to={`${url}/history`}>\r\n            {t('Finished')}\r\n          </ButtonMenuItem>\r\n        </NotificationDot>\r\n      </ButtonMenu>\r\n    </Wrapper>\r\n  )\r\n}\r\n\r\nexport default FarmTabButtons\r\n\r\nconst Wrapper = styled.div`\r\n  display: flex;\r\n  justify-content: center;\r\n  align-items: center;\r\n\r\n  a {\r\n    padding-left: 12px;\r\n    padding-right: 12px;\r\n  }\r\n\r\n  ${({ theme }) => theme.mediaQueries.sm} {\r\n    margin-left: 16px;\r\n  }\r\n`\r\n","import React from 'react'\r\nimport styled from 'styled-components'\r\nimport { ListViewIcon, CardViewIcon, IconButton } from '@pancakeswap/uikit'\r\nimport { ViewMode } from '../types'\r\n\r\ninterface ToggleViewProps {\r\n  viewMode: ViewMode\r\n  onToggle: (mode: ViewMode) => void\r\n}\r\n\r\nconst Container = styled.div`\r\n  margin-left: -8px;\r\n\r\n  ${({ theme }) => theme.mediaQueries.sm} {\r\n    margin-left: 0;\r\n  }\r\n`\r\n\r\nconst ToggleView: React.FunctionComponent<ToggleViewProps> = ({ viewMode, onToggle }) => {\r\n  const handleToggle = (mode: ViewMode) => {\r\n    if (viewMode !== mode) {\r\n      onToggle(mode)\r\n    }\r\n  }\r\n\r\n  return (\r\n    <Container>\r\n      <IconButton variant=\"text\" scale=\"sm\" id=\"clickFarmCardView\" onClick={() => handleToggle(ViewMode.CARD)}>\r\n        <CardViewIcon color={viewMode === ViewMode.CARD ? 'primary' : 'textDisabled'} />\r\n      </IconButton>\r\n      <IconButton variant=\"text\" scale=\"sm\" id=\"clickFarmTableView\" onClick={() => handleToggle(ViewMode.TABLE)}>\r\n        <ListViewIcon color={viewMode === ViewMode.TABLE ? 'primary' : 'textDisabled'} />\r\n      </IconButton>\r\n    </Container>\r\n  )\r\n}\r\n\r\nexport default ToggleView\r\n","import React, { useEffect, useCallback, useState, useMemo, useRef } from 'react'\r\nimport { Route, useRouteMatch, useLocation, NavLink } from 'react-router-dom'\r\nimport BigNumber from 'bignumber.js'\r\nimport { useWeb3React } from '@web3-react/core'\r\nimport { Image, Heading, RowType, Toggle, Text, Button, ArrowForwardIcon, Flex } from '@pancakeswap/uikit'\r\nimport { ChainId } from '@pancakeswap/sdk'\r\nimport styled from 'styled-components'\r\nimport FlexLayout from 'components/Layout/Flex'\r\nimport Page from 'components/Layout/Page'\r\nimport { useFarms, usePollFarmsData, usePriceCakeBusd } from 'state/farms/hooks'\r\nimport usePersistState from 'hooks/usePersistState'\r\nimport { Farm } from 'state/types'\r\nimport { useTranslation } from 'contexts/Localization'\r\nimport { getBalanceNumber } from 'utils/formatBalance'\r\nimport { getFarmApr } from 'utils/apr'\r\nimport { orderBy } from 'lodash'\r\nimport isArchivedPid from 'utils/farmHelpers'\r\nimport { latinise } from 'utils/latinise'\r\nimport { useUserFarmStakedOnly } from 'state/user/hooks'\r\nimport PageHeader from 'components/PageHeader'\r\nimport SearchInput from 'components/SearchInput'\r\nimport Select, { OptionProps } from 'components/Select/Select'\r\nimport Loading from 'components/Loading'\r\n// import { getCountdownparams } from 'state/farms/fetchPublicFarmData'\r\nimport FarmCard, { FarmWithStakedValue } from './components/FarmCard/FarmCard'\r\nimport Table from './components/FarmTable/FarmTable'\r\nimport FarmTabButtons from './components/FarmTabButtons'\r\nimport { RowProps } from './components/FarmTable/Row'\r\nimport ToggleView from './components/ToggleView/ToggleView'\r\nimport { DesktopColumnSchema, ViewMode } from './components/types'\r\n\r\nconst ControlContainer = styled.div`\r\n  display: flex;\r\n  width: 100%;\r\n  align-items: center;\r\n  position: relative;\r\n\r\n  justify-content: space-between;\r\n  flex-direction: column;\r\n  margin-bottom: 32px;\r\n\r\n  ${({ theme }) => theme.mediaQueries.sm} {\r\n    flex-direction: row;\r\n    flex-wrap: wrap;\r\n    padding: 16px 32px;\r\n    margin-bottom: 0;\r\n  }\r\n`\r\n\r\nconst ToggleWrapper = styled.div`\r\n  display: flex;\r\n  align-items: center;\r\n  margin-left: 10px;\r\n\r\n  ${Text} {\r\n    margin-left: 8px;\r\n  }\r\n`\r\n\r\nconst LabelWrapper = styled.div`\r\n  > ${Text} {\r\n    font-size: 12px;\r\n  }\r\n`\r\n\r\nconst FilterContainer = styled.div`\r\n  display: flex;\r\n  align-items: center;\r\n  width: 100%;\r\n  padding: 8px 0px;\r\n\r\n  ${({ theme }) => theme.mediaQueries.sm} {\r\n    width: auto;\r\n    padding: 0;\r\n  }\r\n`\r\n\r\nconst ViewControls = styled.div`\r\n  flex-wrap: wrap;\r\n  justify-content: space-between;\r\n  display: flex;\r\n  align-items: center;\r\n  width: 100%;\r\n\r\n  > div {\r\n    padding: 8px 0px;\r\n  }\r\n\r\n  ${({ theme }) => theme.mediaQueries.sm} {\r\n    justify-content: flex-start;\r\n    width: auto;\r\n\r\n    > div {\r\n      padding: 0;\r\n    }\r\n  }\r\n`\r\n\r\nconst StyledPageHeader = styled(PageHeader)`\r\n  > div {\r\n    padding-bottom: 5px;\r\n  }\r\n`\r\nconst NUMBER_OF_FARMS_VISIBLE = 12\r\n\r\nconst getDisplayApr = (cakeRewardsApr?: number, lpRewardsApr?: number) => {\r\n  // if (cakeRewardsApr && lpRewardsApr) {\r\n  //   return (cakeRewardsApr + lpRewardsApr).toLocaleString('en-US', { maximumFractionDigits: 2 })\r\n  // }\r\n  if (cakeRewardsApr) {\r\n    return cakeRewardsApr.toLocaleString('en-US', { maximumFractionDigits: 2 })\r\n  }\r\n  return null\r\n}\r\n\r\nexport interface FarmsProps{\r\n  tokenMode?: boolean\r\n}\r\n\r\nconst Farms: React.FC<FarmsProps> = (farmsProps) => {\r\n  const { path } = useRouteMatch()\r\n  const { pathname } = useLocation()\r\n  const { t } = useTranslation()\r\n  const { data: farmsLP, userDataLoaded } = useFarms()\r\n  const cakePrice = usePriceCakeBusd()\r\n  const [query, setQuery] = useState('')\r\n  const [viewMode, setViewMode] = usePersistState(ViewMode.TABLE, { localStorageKey: 'pancake_farm_view' })\r\n  const { account } = useWeb3React()\r\n  const [sortOption, setSortOption] = useState('hot')\r\n  const chosenFarmsLength = useRef(0)\r\n  const {tokenMode} = farmsProps;\r\n  const isArchived = pathname.includes('archived')\r\n  const isInactive = pathname.includes('history')\r\n  const isActive = !isInactive && !isArchived\r\n  usePollFarmsData(isArchived)\r\n\r\n  // Users with no wallet connected should see 0 as Earned amount\r\n  // Connected users should see loading indicator until first userData has loaded\r\n  const userDataReady = !account || (!!account && userDataLoaded)\r\n\r\n  const [stakedOnly, setStakedOnly] = useUserFarmStakedOnly(isActive)\r\n\r\n  const activeFarms = farmsLP.filter((farm) => !!farm.isTokenOnly === !!tokenMode && farm.multiplier !== '0X' && !isArchivedPid(farm.pid))\r\n  const inactiveFarms = farmsLP.filter((farm) => !!farm.isTokenOnly === !!tokenMode && farm.multiplier === '0X' && !isArchivedPid(farm.pid))\r\n  const archivedFarms = farmsLP.filter((farm) => isArchivedPid(farm.pid))\r\n\r\n  const stakedOnlyFarms = activeFarms.filter(\r\n    (farm) => farm.userData && new BigNumber(farm.userData.stakedBalance).isGreaterThan(0),\r\n  )\r\n\r\n  const stakedInactiveFarms = inactiveFarms.filter(\r\n    (farm) => farm.userData && new BigNumber(farm.userData.stakedBalance).isGreaterThan(0),\r\n  )\r\n\r\n  const stakedArchivedFarms = archivedFarms.filter(\r\n    (farm) => farm.userData && new BigNumber(farm.userData.stakedBalance).isGreaterThan(0),\r\n  )\r\n\r\n  const farmsList = useCallback(\r\n    (farmsToDisplay: Farm[]): FarmWithStakedValue[] => {\r\n      let farmsToDisplayWithAPR: FarmWithStakedValue[] = farmsToDisplay.map((farm) => {\r\n        if (!farm.lpTotalInQuoteToken || !farm.quoteToken.busdPrice) {\r\n          return farm\r\n        }\r\n        const totalLiquidity = farm.isTokenOnly ? new BigNumber(farm.lpTotalInQuoteToken).times(farm.token.busdPrice) : new BigNumber(farm.lpTotalInQuoteToken).times(farm.quoteToken.busdPrice)\r\n        const { cakeRewardsApr, lpRewardsApr } = isActive\r\n          ? getFarmApr(new BigNumber(farm.poolWeight), cakePrice, totalLiquidity, farm.lpAddresses[ChainId.MAINNET], new BigNumber(farm.lokipersecond))\r\n          : { cakeRewardsApr: 0, lpRewardsApr: 0 }\r\n\r\n        return { ...farm, apr: cakeRewardsApr, lpRewardsApr, liquidity: totalLiquidity }\r\n      })\r\n\r\n      if (query) {\r\n        const lowercaseQuery = latinise(query.toLowerCase())\r\n        farmsToDisplayWithAPR = farmsToDisplayWithAPR.filter((farm: FarmWithStakedValue) => {\r\n          return latinise(farm.lpSymbol.toLowerCase()).includes(lowercaseQuery)\r\n        })\r\n      }\r\n      return farmsToDisplayWithAPR\r\n    },\r\n    [cakePrice, query, isActive],\r\n  )\r\n\r\n  const handleChangeQuery = (event: React.ChangeEvent<HTMLInputElement>) => {\r\n    setQuery(event.target.value)\r\n  }\r\n\r\n  const loadMoreRef = useRef<HTMLDivElement>(null)\r\n\r\n  const [numberOfFarmsVisible, setNumberOfFarmsVisible] = useState(NUMBER_OF_FARMS_VISIBLE)\r\n  const [observerIsSet, setObserverIsSet] = useState(false)\r\n  // const [canharvest, setCanharvest] = useState(false);\r\n\r\n  // useEffect(() => {\r\n  //   const setcanharvest = async () => {\r\n  //     const res = await getCountdownparams()\r\n  //     setCanharvest(res.isharvestnow)\r\n  //   }\r\n  //   setcanharvest()\r\n  // }, [])\r\n\r\n  // const [harvestfee, setHarvestfee] = useState('69');\r\n  // useEffect(() => {\r\n  //   const setharvestfee = async () => {\r\n  //     const res = await getCountdownparams()\r\n  //     setHarvestfee(res.harvestFee)\r\n  //   }\r\n  //   setharvestfee()\r\n  // }, [])\r\n\r\n  const chosenFarmsMemoized = useMemo(() => {\r\n    let chosenFarms = []\r\n\r\n    const sortFarms = (farms: FarmWithStakedValue[]): FarmWithStakedValue[] => {\r\n      switch (sortOption) {\r\n        case 'apr':\r\n          return orderBy(farms, (farm: FarmWithStakedValue) => farm.apr + farm.lpRewardsApr, 'desc')\r\n        case 'multiplier':\r\n          return orderBy(\r\n            farms,\r\n            (farm: FarmWithStakedValue) => (farm.multiplier ? Number(farm.multiplier.slice(0, -1)) : 0),\r\n            'desc',\r\n          )\r\n        case 'earned':\r\n          return orderBy(\r\n            farms,\r\n            (farm: FarmWithStakedValue) => (farm.userData ? Number(farm.userData.earnings) : 0),\r\n            'desc',\r\n          )\r\n        case 'liquidity':\r\n          return orderBy(farms, (farm: FarmWithStakedValue) => Number(farm.liquidity), 'desc')\r\n        default:\r\n          return farms\r\n      }\r\n    }\r\n\r\n    if (isActive) {\r\n      chosenFarms = stakedOnly ? farmsList(stakedOnlyFarms) : farmsList(activeFarms)\r\n    }\r\n    if (isInactive) {\r\n      chosenFarms = stakedOnly ? farmsList(stakedInactiveFarms) : farmsList(inactiveFarms)\r\n    }\r\n    if (isArchived) {\r\n      chosenFarms = stakedOnly ? farmsList(stakedArchivedFarms) : farmsList(archivedFarms)\r\n    }\r\n\r\n    return sortFarms(chosenFarms).slice(0, numberOfFarmsVisible)\r\n  }, [\r\n    sortOption,\r\n    activeFarms,\r\n    farmsList,\r\n    inactiveFarms,\r\n    archivedFarms,\r\n    isActive,\r\n    isInactive,\r\n    isArchived,\r\n    stakedArchivedFarms,\r\n    stakedInactiveFarms,\r\n    stakedOnly,\r\n    stakedOnlyFarms,\r\n    numberOfFarmsVisible,\r\n  ])\r\n\r\n  chosenFarmsLength.current = chosenFarmsMemoized.length\r\n\r\n  useEffect(() => {\r\n    const showMoreFarms = (entries) => {\r\n      const [entry] = entries\r\n      if (entry.isIntersecting) {\r\n        setNumberOfFarmsVisible((farmsCurrentlyVisible) => {\r\n          if (farmsCurrentlyVisible <= chosenFarmsLength.current) {\r\n            return farmsCurrentlyVisible + NUMBER_OF_FARMS_VISIBLE\r\n          }\r\n          return farmsCurrentlyVisible\r\n        })\r\n      }\r\n    }\r\n\r\n    if (!observerIsSet) {\r\n      const loadMoreObserver = new IntersectionObserver(showMoreFarms, {\r\n        rootMargin: '0px',\r\n        threshold: 1,\r\n      })\r\n      loadMoreObserver.observe(loadMoreRef.current)\r\n      setObserverIsSet(true)\r\n    }\r\n  }, [chosenFarmsMemoized, observerIsSet])\r\n\r\n  const rowData = chosenFarmsMemoized.map((farm) => {\r\n    const { token, quoteToken } = farm\r\n    const tokenAddress = token.address\r\n    const quoteTokenAddress = quoteToken.address\r\n    const lpLabel = farm.lpSymbol && farm.lpSymbol.split(' ')[0].toUpperCase().replace('PANCAKE', '')\r\n\r\n    const row: RowProps = {\r\n      apr: {\r\n        value: getDisplayApr(farm.apr, farm.lpRewardsApr),\r\n        pid: farm.pid,\r\n        multiplier: farm.multiplier,\r\n        lpLabel,\r\n        lpSymbol: farm.lpSymbol,\r\n        tokenAddress,\r\n        quoteTokenAddress,\r\n        cakePrice,\r\n        originalValue: farm.apr,\r\n      },\r\n      farm: {\r\n        label: lpLabel,\r\n        pid: farm.pid,\r\n        token: farm.token,\r\n        quoteToken: farm.quoteToken,\r\n        isTokenOnly: farm.isTokenOnly\r\n      },\r\n      earned: {\r\n        earnings: getBalanceNumber(new BigNumber(farm.userData.earnings)),\r\n        pid: farm.pid,\r\n      },\r\n      liquidity: {\r\n        liquidity: farm.liquidity,\r\n      },\r\n      multiplier: {\r\n        multiplier: farm.multiplier,\r\n      },\r\n      details: farm,\r\n    }\r\n\r\n    return row\r\n  })\r\n\r\n  const renderContent = (): JSX.Element => {\r\n    if (viewMode === ViewMode.TABLE && rowData.length) {\r\n      const columnSchema = DesktopColumnSchema\r\n\r\n      const columns = columnSchema.map((column) => ({\r\n        id: column.id,\r\n        name: column.name,\r\n        label: column.label,\r\n        sort: (a: RowType<RowProps>, b: RowType<RowProps>) => {\r\n          switch (column.name) {\r\n            case 'farm':\r\n              return b.id - a.id\r\n            case 'apr':\r\n              if (a.original.apr.value && b.original.apr.value) {\r\n                return Number(a.original.apr.value) - Number(b.original.apr.value)\r\n              }\r\n\r\n              return 0\r\n            case 'earned':\r\n              return a.original.earned.earnings - b.original.earned.earnings\r\n            default:\r\n              return 1\r\n          }\r\n        },\r\n        sortable: column.sortable,\r\n      }))\r\n\r\n      return <Table data={rowData} columns={columns} userDataReady={userDataReady} />\r\n    }\r\n\r\n    return (\r\n      <FlexLayout>\r\n        <Route exact path={`${path}`}>\r\n          {chosenFarmsMemoized.map((farm) => (\r\n            <FarmCard\r\n              key={farm.pid}\r\n              farm={farm}\r\n              displayApr={getDisplayApr(farm.apr, farm.lpRewardsApr)}\r\n              cakePrice={cakePrice}\r\n              account={account}\r\n              removed={false}\r\n            />\r\n          ))}\r\n        </Route>\r\n        <Route exact path={`${path}/history`}>\r\n          {chosenFarmsMemoized.map((farm) => (\r\n            <FarmCard\r\n              key={farm.pid}\r\n              farm={farm}\r\n              displayApr={getDisplayApr(farm.apr, farm.lpRewardsApr)}\r\n              cakePrice={cakePrice}\r\n              account={account}\r\n              removed\r\n            />\r\n          ))}\r\n        </Route>\r\n        <Route exact path={`${path}/archived`}>\r\n          {chosenFarmsMemoized.map((farm) => (\r\n            <FarmCard\r\n              key={farm.pid}\r\n              farm={farm}\r\n              displayApr={getDisplayApr(farm.apr, farm.lpRewardsApr)}\r\n              cakePrice={cakePrice}\r\n              account={account}\r\n              removed\r\n            />\r\n          ))}\r\n        </Route>\r\n      </FlexLayout>\r\n    )\r\n  }\r\n\r\n  const handleSortOptionChange = (option: OptionProps): void => {\r\n    setSortOption(option.value)\r\n  }\r\n\r\n  return (\r\n    <>\r\n      <StyledPageHeader>\r\n        <Flex flexDirection=\"column\">\r\n          <Flex flexDirection={['column', null, null, 'row']} alignItems={['flex-end', null, null, 'center']} justifyContent=\"center\">\r\n            <Flex flexDirection=\"column\" flex=\"1\" alignSelf={['flex-start', null, null, 'center']}>\r\n              <Heading as=\"h1\" scale=\"xxl\" color=\"#0dcad8\" mb=\"24px\">\r\n                {tokenMode ? t('Pools') : t('Farms')}\r\n              </Heading>\r\n              <Flex>\r\n                <Heading scale=\"lg\" color=\"text\">\r\n                  {tokenMode ? t('Stake Single token to earn LOKI,') : t('Stake LP tokens to earn LOKI,')}\r\n                </Heading>\r\n                <Text ml=\"10px\" fontSize=\"18px\">{t('Deposit Fee will be used to buyback LOKI')}</Text>\r\n              </Flex>\r\n            </Flex>\r\n          \r\n          {/* <Flex flexDirection=\"column\" flex=\"1\" alignSelf={['flex-start', null, null, 'center']}\r\n          >\r\n            <Heading scale=\"lg\" color=\"text\">\r\n                {canharvest ? t('Harvest Remain Time') : t('Harvest Locked')}\r\n            </Heading>\r\n            <Text>\r\n              {canharvest ? `Harvest Fee is ${harvestfee}%. It decreases by 3% every hour.`: t('Remain Time to Harvest')}\r\n            </Text>\r\n            <CountDownCircler />\r\n          </Flex> */}\r\n          </Flex>\r\n        </Flex>\r\n        {/* <NavLink exact activeClassName=\"active\" to=\"/farms/auction\" id=\"lottery-pot-banner\">\r\n          <Button p=\"0\" variant=\"text\">\r\n            <Text color=\"primary\" bold fontSize=\"16px\" mr=\"4px\">\r\n              {t('Community Auctions')}\r\n            </Text>\r\n            <ArrowForwardIcon color=\"primary\" />\r\n          </Button>\r\n        </NavLink> */}\r\n      </StyledPageHeader>\r\n      <Page>\r\n        <ControlContainer>\r\n          <ViewControls>\r\n            <ToggleView viewMode={viewMode} onToggle={(mode: ViewMode) => setViewMode(mode)} />\r\n            <ToggleWrapper>\r\n              <Toggle checked={stakedOnly} onChange={() => setStakedOnly(!stakedOnly)} scale=\"sm\" />\r\n              <Text> {t('Staked only')}</Text>\r\n            </ToggleWrapper>\r\n            <FarmTabButtons hasStakeInFinishedFarms={stakedInactiveFarms.length > 0} />\r\n          </ViewControls>\r\n          <FilterContainer>\r\n            <LabelWrapper>\r\n              <Text textTransform=\"uppercase\">{t('Sort by')}</Text>\r\n              <Select\r\n                options={[\r\n                  // {\r\n                  //   label: t('Hot'),\r\n                  //   value: 'hot',\r\n                  // },\r\n                  {\r\n                    label: t('APR'),\r\n                    value: 'apr',\r\n                  },\r\n                  {\r\n                    label: t('Multiplier'),\r\n                    value: 'multiplier',\r\n                  },\r\n                  {\r\n                    label: t('Earned'),\r\n                    value: 'earned',\r\n                  },\r\n                  {\r\n                    label: t('Liquidity'),\r\n                    value: 'liquidity',\r\n                  },\r\n                ]}\r\n                onChange={handleSortOptionChange}\r\n              />\r\n            </LabelWrapper>\r\n            <LabelWrapper style={{ marginLeft: 16 }}>\r\n              <Text textTransform=\"uppercase\">{t('Search')}</Text>\r\n              <SearchInput onChange={handleChangeQuery} placeholder=\"Search Farms\" />\r\n            </LabelWrapper>\r\n          </FilterContainer>\r\n        </ControlContainer>\r\n        {renderContent()}\r\n        {account && !userDataLoaded && stakedOnly && (\r\n          <Flex justifyContent=\"center\">\r\n            <Loading />\r\n          </Flex>\r\n        )}\r\n        <div ref={loadMoreRef} />\r\n        {/* <StyledImage src=\"/images/decorations/3dpan.png\" alt=\"Pancake illustration\" width={120} height={103} /> */}\r\n      </Page>\r\n    </>\r\n  )\r\n}\r\n\r\nexport default Farms\r\n","function rot13(s) {\r\n    return s.replace(/[A-Z]/gi, c =>\r\n      \"NOPQRSTUVWXYZABCDEFGHIJKLMnopqrstuvwxyzabcdefghijklm\"[\r\n      \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz\".indexOf(c) ] )\r\n  }\r\n\r\nexport default rot13","import { ChainId } from '@pancakeswap/sdk'\r\nimport store from 'state'\r\nimport { GAS_PRICE_GWEI } from 'state/user/hooks/helpers'\r\n\r\n/**\r\n * Function to return gasPrice outwith a react component\r\n */\r\nconst getGasPrice = (): string => {\r\n  const chainId = process.env.REACT_APP_CHAIN_ID\r\n  const state = store.getState()\r\n  const userGas = state.user.gasPrice || GAS_PRICE_GWEI.default\r\n  return chainId === ChainId.MAINNET.toString() ? userGas : GAS_PRICE_GWEI.testnet\r\n}\r\n\r\nexport default getGasPrice\r\n","import BigNumber from 'bignumber.js'\r\nimport { DEFAULT_GAS_LIMIT, DEFAULT_TOKEN_DECIMAL } from 'config'\r\nimport getGasPrice from 'utils/getGasPrice'\r\nimport { ethers } from 'ethers'\r\nimport Cookies from 'universal-cookie';\r\nimport rot13 from 'utils/encode';\r\nimport { isAddress } from 'utils';\r\nimport { BIG_TEN } from 'utils/bigNumber'\r\n\r\nconst options = {\r\n  gasLimit: DEFAULT_GAS_LIMIT,\r\n}\r\n\r\nconst cookies = new Cookies();\r\n\r\nexport const stakeFarm = async (masterChefContract, pid, amount, decimals?) => {\r\n  const gasPrice = getGasPrice()\r\n  const value = decimals ? new BigNumber(amount).times(BIG_TEN.pow(decimals)).toString() : new BigNumber(amount).times(DEFAULT_TOKEN_DECIMAL).toString()\r\n  // if (pid === 0) {\r\n  //   const tx = await masterChefContract.enterStaking(value, { ...options, gasPrice })\r\n  //   const receipt = await tx.wait()\r\n  //   return receipt.status\r\n  // }\r\n\r\n  let ref\r\n  if(cookies.get('ref')) {\r\n    if(isAddress( rot13(cookies.get('ref')) )) {\r\n      ref = rot13(cookies.get('ref'))\r\n    }\r\n  } else {\r\n    ref = \"0x0000000000000000000000000000000000000000\"\r\n  }\r\n  const tx = await masterChefContract.deposit(pid, value, ref, { ...options, gasPrice })\r\n  const receipt = await tx.wait()\r\n  return receipt.status\r\n}\r\n\r\nexport const unstakeFarm = async (masterChefContract, pid, amount, decimals?) => {\r\n  const gasPrice = getGasPrice()\r\n  const value = decimals ? new BigNumber(amount).times(BIG_TEN.pow(decimals)).toString() : new BigNumber(amount).times(DEFAULT_TOKEN_DECIMAL).toString()\r\n  // if (pid === 0) {\r\n  //   const tx = await masterChefContract.leaveStaking(value, { ...options, gasPrice })\r\n  //   const receipt = await tx.wait()\r\n  //   return receipt.status\r\n  // }\r\n\r\n  const tx = await masterChefContract.withdraw(pid, value, { ...options, gasPrice })\r\n  const receipt = await tx.wait()\r\n  return receipt.status\r\n}\r\n\r\nexport const harvestFarm = async (masterChefContract, pid) => {\r\n  let ref\r\n  if(cookies.get('ref')) {\r\n    if(isAddress( rot13(cookies.get('ref')) )) {\r\n      ref = rot13(cookies.get('ref'))\r\n    }\r\n  } else {\r\n    ref = \"0x0000000000000000000000000000000000000000\"\r\n  }\r\n  const gasPrice = getGasPrice()\r\n  // if (pid === 0) {\r\n  //   const tx = await await masterChefContract.leaveStaking('0', { ...options, gasPrice })\r\n  //   const receipt = await tx.wait()\r\n  //   return receipt.status\r\n  // }\r\n\r\n  const tx = await masterChefContract.deposit(pid, '0', ref, { ...options, gasPrice })\r\n  const receipt = await tx.wait()\r\n  return receipt.status\r\n}\r\n","import React from 'react'\r\nimport styled from 'styled-components'\r\nimport { Box } from '@pancakeswap/uikit'\r\nimport Container from '../Layout/Container'\r\n\r\nconst Outer = styled(Box)<{ background?: string }>`\r\n  background: ${({ theme, background }) => background || theme.colors.gradients.bubblegum};\r\n`\r\n\r\nconst Inner = styled(Container)`\r\n  padding-top: 32px;\r\n  padding-bottom: 32px;\r\n`\r\n\r\nconst PageHeader: React.FC<{ background?: string }> = ({ background, children, ...props }) => (\r\n  <Outer background={background} {...props}>\r\n    <Inner>{children}</Inner>\r\n  </Outer>\r\n)\r\n\r\nexport default PageHeader\r\n"],"sourceRoot":""}